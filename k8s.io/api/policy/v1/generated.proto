// Generated by: gen-go-to-protobuf
syntax = "proto3";
package k8s.io.api.policy.v1;
option  go_package              = "k8s.io/api/policy/v1";
option (dev.f110.kubeproto.k8s) = {
  domain: "policy",
  version: "v1",
};
option (dev.f110.kubeproto.kubeproto_go_package) = "go.f110.dev/kubeproto/go/apis/policyv1";

import "kube.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/util/intstr/generated.proto";

message Eviction {
  // DeleteOptions may be provided
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.DeleteOptions delete_options = 3 [(dev.f110.kubeproto.field) = { go_name: "DeleteOptions", api_field_name: "deleteOptions", inline: false }];

  option (dev.f110.kubeproto.kind) = {
  };
}

message PodDisruptionBudget {
  // Specification of the desired behavior of the PodDisruptionBudget.
  optional PodDisruptionBudgetSpec spec = 3 [(dev.f110.kubeproto.field) = { go_name: "Spec", api_field_name: "spec", inline: false }];
  // Most recently observed status of the PodDisruptionBudget.
  optional PodDisruptionBudgetStatus status = 4 [(dev.f110.kubeproto.field) = { go_name: "Status", api_field_name: "status", inline: false }];

  option (dev.f110.kubeproto.kind) = {
  };
}

message PodDisruptionBudgetList {
  .k8s.io.apimachinery.pkg.apis.meta.v1.TypeMeta type_meta = 1 [(dev.f110.kubeproto.field) = { go_name: "TypeMeta", inline: true }];
  // Standard object's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta list_meta = 2 [(dev.f110.kubeproto.field) = { go_name: "ListMeta", api_field_name: "metadata", inline: false }];
  // Items is a list of PodDisruptionBudgets
  repeated PodDisruptionBudget items = 3 [(dev.f110.kubeproto.field) = { go_name: "Items", api_field_name: "items", inline: false }];
}

message PodDisruptionBudgetSpec {
  // An eviction is allowed if at least "minAvailable" pods selected by
  // "selector" will still be available after the eviction, i.e. even in the
  // absence of the evicted pod.  So for example you can prevent all voluntary
  // evictions by specifying "100%".
  optional .k8s.io.apimachinery.pkg.util.intstr.IntOrString min_available = 1 [(dev.f110.kubeproto.field) = { go_name: "MinAvailable", api_field_name: "minAvailable", inline: false }];
  // Label query over pods whose evictions are managed by the disruption
  // budget.
  // A null selector will match no pods, while an empty ({}) selector will select
  // all pods within the namespace.
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector selector = 2 [(dev.f110.kubeproto.field) = { go_name: "Selector", api_field_name: "selector", inline: false }];
  // An eviction is allowed if at most "maxUnavailable" pods selected by
  // "selector" are unavailable after the eviction, i.e. even in absence of
  // the evicted pod. For example, one can prevent all voluntary evictions
  // by specifying 0. This is a mutually exclusive setting with "minAvailable".
  optional .k8s.io.apimachinery.pkg.util.intstr.IntOrString max_unavailable = 3 [(dev.f110.kubeproto.field) = { go_name: "MaxUnavailable", api_field_name: "maxUnavailable", inline: false }];
}

message PodDisruptionBudgetStatus {
  // Most recent generation observed when updating this PDB status. DisruptionsAllowed and other
  // status information is valid only if observedGeneration equals to PDB's object generation.
  optional int64 observed_generation = 1 [(dev.f110.kubeproto.field) = { go_name: "ObservedGeneration", api_field_name: "observedGeneration", inline: false }];
  // DisruptedPods contains information about pods whose eviction was
  // processed by the API server eviction subresource handler but has not
  // yet been observed by the PodDisruptionBudget controller.
  // A pod will be in this map from the time when the API server processed the
  // eviction request to the time when the pod is seen by PDB controller
  // as having been marked for deletion (or after a timeout). The key in the map is the name of the pod
  // and the value is the time when the API server processed the eviction request. If
  // the deletion didn't occur and a pod is still there it will be removed from
  // the list automatically by PodDisruptionBudget controller after some time.
  // If everything goes smooth this map should be empty for the most of the time.
  // Large number of entries in the map may indicate problems with pod deletions.
  map<string, .k8s.io.apimachinery.pkg.apis.meta.v1.Time> disrupted_pods = 2 [(dev.f110.kubeproto.field) = { go_name: "DisruptedPods", api_field_name: "disruptedPods", inline: false }];
  // Number of pod disruptions that are currently allowed.
  int32 disruptions_allowed = 3 [(dev.f110.kubeproto.field) = { go_name: "DisruptionsAllowed", api_field_name: "disruptionsAllowed", inline: false }];
  // current number of healthy pods
  int32 current_healthy = 4 [(dev.f110.kubeproto.field) = { go_name: "CurrentHealthy", api_field_name: "currentHealthy", inline: false }];
  // minimum desired number of healthy pods
  int32 desired_healthy = 5 [(dev.f110.kubeproto.field) = { go_name: "DesiredHealthy", api_field_name: "desiredHealthy", inline: false }];
  // total number of pods counted by this disruption budget
  int32 expected_pods = 6 [(dev.f110.kubeproto.field) = { go_name: "ExpectedPods", api_field_name: "expectedPods", inline: false }];
  // Conditions contain conditions for PDB. The disruption controller sets the
  // DisruptionAllowed condition. The following are known values for the reason field
  // (additional reasons could be added in the future):
  // - SyncFailed: The controller encountered an error and wasn't able to compute
  //               the number of allowed disruptions. Therefore no disruptions are
  //               allowed and the status of the condition will be False.
  // - InsufficientPods: The number of pods are either at or below the number
  //                     required by the PodDisruptionBudget. No disruptions are
  //                     allowed and the status of the condition will be False.
  // - SufficientPods: There are more pods than required by the PodDisruptionBudget.
  //                   The condition will be True, and the number of allowed
  //                   disruptions are provided by the disruptionsAllowed property.
  repeated .k8s.io.apimachinery.pkg.apis.meta.v1.Condition conditions = 7 [(dev.f110.kubeproto.field) = { go_name: "Conditions", api_field_name: "conditions", inline: false }];
}
