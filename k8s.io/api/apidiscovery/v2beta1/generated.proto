// Generated by: gen-go-to-protobuf
syntax = "proto3";
package k8s.io.api.apidiscovery.v2beta1;
option  go_package              = "k8s.io/api/apidiscovery/v2beta1";
option (dev.f110.kubeproto.k8s) = {
  domain: "apidiscovery.k8s.io",
  version: "v2beta1",
};
option (dev.f110.kubeproto.kubeproto_go_package) = "go.f110.dev/kubeproto/go/apis/apidiscoveryv2beta1";

import "kube.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";

enum DiscoveryFreshness {
  DISCOVERY_FRESHNESS_CURRENT = 0 [(dev.f110.kubeproto.value) = { value: "Current" }];
  DISCOVERY_FRESHNESS_STALE   = 1 [(dev.f110.kubeproto.value) = { value: "Stale" }];
}

enum ResourceScope {
  RESOURCE_SCOPE_CLUSTER    = 0 [(dev.f110.kubeproto.value) = { value: "Cluster" }];
  RESOURCE_SCOPE_NAMESPACED = 1 [(dev.f110.kubeproto.value) = { value: "Namespaced" }];
}

message APIGroupDiscovery {
  // versions are the versions supported in this group. They are sorted in descending order of preference,
  // with the preferred version being the first entry.
  repeated APIVersionDiscovery versions = 3 [(dev.f110.kubeproto.field) = { go_name: "Versions", api_field_name: "versions", inline: false }];

  option (dev.f110.kubeproto.kind) = {
  };
}

message APIGroupDiscoveryList {
  .k8s.io.apimachinery.pkg.apis.meta.v1.TypeMeta type_meta = 1 [(dev.f110.kubeproto.field) = { go_name: "TypeMeta", inline: true }];
  // ResourceVersion will not be set, because this does not have a replayable ordering among multiple apiservers.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta list_meta = 2 [(dev.f110.kubeproto.field) = { go_name: "ListMeta", api_field_name: "metadata", inline: false }];
  // items is the list of groups for discovery. The groups are listed in priority order.
  repeated APIGroupDiscovery items = 3 [(dev.f110.kubeproto.field) = { go_name: "Items", api_field_name: "items", inline: false }];
}

message APIResourceDiscovery {
  // resource is the plural name of the resource.  This is used in the URL path and is the unique identifier
  // for this resource across all versions in the API group.
  // Resources with non-empty groups are located at /apis/<APIGroupDiscovery.objectMeta.name>/<APIVersionDiscovery.version>/<APIResourceDiscovery.Resource>
  // Resources with empty groups are located at /api/v1/<APIResourceDiscovery.Resource>
  string resource = 1 [(dev.f110.kubeproto.field) = { go_name: "Resource", api_field_name: "resource", inline: false }];
  // responseKind describes the group, version, and kind of the serialization schema for the object type this endpoint typically returns.
  // APIs may return other objects types at their discretion, such as error conditions, requests for alternate representations, or other operation specific behavior.
  // This value will be null or empty if an APIService reports subresources but supports no operations on the parent resource
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionKind response_kind = 2 [(dev.f110.kubeproto.field) = { go_name: "ResponseKind", api_field_name: "responseKind", inline: false }];
  // scope indicates the scope of a resource, either Cluster or Namespaced
  ResourceScope scope = 3 [(dev.f110.kubeproto.field) = { go_name: "Scope", api_field_name: "scope", inline: false }];
  // singularResource is the singular name of the resource.  This allows clients to handle plural and singular opaquely.
  // For many clients the singular form of the resource will be more understandable to users reading messages and should be used when integrating the name of the resource into a sentence.
  // The command line tool kubectl, for example, allows use of the singular resource name in place of plurals.
  // The singular form of a resource should always be an optional element - when in doubt use the canonical resource name.
  string singular_resource = 4 [(dev.f110.kubeproto.field) = { go_name: "SingularResource", api_field_name: "singularResource", inline: false }];
  // verbs is a list of supported API operation types (this includes
  // but is not limited to get, list, watch, create, update, patch,
  // delete, deletecollection, and proxy).
  repeated string verbs = 5 [(dev.f110.kubeproto.field) = { go_name: "Verbs", api_field_name: "verbs", inline: false }];
  // shortNames is a list of suggested short names of the resource.
  repeated string short_names = 6 [(dev.f110.kubeproto.field) = { go_name: "ShortNames", api_field_name: "shortNames", inline: false }];
  // categories is a list of the grouped resources this resource belongs to (e.g. 'all').
  // Clients may use this to simplify acting on multiple resource types at once.
  repeated string categories = 7 [(dev.f110.kubeproto.field) = { go_name: "Categories", api_field_name: "categories", inline: false }];
  // subresources is a list of subresources provided by this resource. Subresources are located at /apis/<APIGroupDiscovery.objectMeta.name>/<APIVersionDiscovery.version>/<APIResourceDiscovery.Resource>/name-of-instance/<APIResourceDiscovery.subresources[i].subresource>
  repeated APISubresourceDiscovery subresources = 8 [(dev.f110.kubeproto.field) = { go_name: "Subresources", api_field_name: "subresources", inline: false }];
}

message APISubresourceDiscovery {
  // subresource is the name of the subresource.  This is used in the URL path and is the unique identifier
  // for this resource across all versions.
  string subresource = 1 [(dev.f110.kubeproto.field) = { go_name: "Subresource", api_field_name: "subresource", inline: false }];
  // responseKind describes the group, version, and kind of the serialization schema for the object type this endpoint typically returns.
  // Some subresources do not return normal resources, these will have null or empty return types.
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionKind response_kind = 2 [(dev.f110.kubeproto.field) = { go_name: "ResponseKind", api_field_name: "responseKind", inline: false }];
  // acceptedTypes describes the kinds that this endpoint accepts.
  // Subresources may accept the standard content types or define
  // custom negotiation schemes. The list may not be exhaustive for
  // all operations.
  repeated .k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionKind accepted_types = 3 [(dev.f110.kubeproto.field) = { go_name: "AcceptedTypes", api_field_name: "acceptedTypes", inline: false }];
  // verbs is a list of supported API operation types (this includes
  // but is not limited to get, list, watch, create, update, patch,
  // delete, deletecollection, and proxy). Subresources may define
  // custom verbs outside the standard Kubernetes verb set. Clients
  // should expect the behavior of standard verbs to align with
  // Kubernetes interaction conventions.
  repeated string verbs = 4 [(dev.f110.kubeproto.field) = { go_name: "Verbs", api_field_name: "verbs", inline: false }];
}

message APIVersionDiscovery {
  // version is the name of the version within a group version.
  string version = 1 [(dev.f110.kubeproto.field) = { go_name: "Version", api_field_name: "version", inline: false }];
  // resources is a list of APIResourceDiscovery objects for the corresponding group version.
  repeated APIResourceDiscovery resources = 2 [(dev.f110.kubeproto.field) = { go_name: "Resources", api_field_name: "resources", inline: false }];
  // freshness marks whether a group version's discovery document is up to date.
  // "Current" indicates the discovery document was recently
  // refreshed. "Stale" indicates the discovery document could not
  // be retrieved and the returned discovery document may be
  // significantly out of date. Clients that require the latest
  // version of the discovery information be retrieved before
  // performing an operation should not use the aggregated document
  optional DiscoveryFreshness freshness = 3 [(dev.f110.kubeproto.field) = { go_name: "Freshness", api_field_name: "freshness", inline: false }];
}
