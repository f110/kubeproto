// Generated by: gen-go-to-protobuf
syntax = "proto3";
package k8s.io.api.autoscaling.v2;
option  go_package              = "k8s.io/api/autoscaling/v2";
option (dev.f110.kubeproto.k8s) = {
  domain: "autoscaling",
  version: "v2",
};
option (dev.f110.kubeproto.kubeproto_go_package) = "go.f110.dev/kubeproto/go/apis/autoscalingv2";

import "kube.proto";
import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/apimachinery/pkg/api/resource/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";

enum HPAScalingPolicyType {
  HPA_SCALING_POLICY_TYPE_PODS    = 0 [(dev.f110.kubeproto.value) = { value: "Pods" }];
  HPA_SCALING_POLICY_TYPE_PERCENT = 1 [(dev.f110.kubeproto.value) = { value: "Percent" }];
}

enum HorizontalPodAutoscalerConditionType {
  HORIZONTAL_POD_AUTOSCALER_CONDITION_TYPE_SCALING_ACTIVE  = 0;
  HORIZONTAL_POD_AUTOSCALER_CONDITION_TYPE_ABLE_TO_SCALE   = 1;
  HORIZONTAL_POD_AUTOSCALER_CONDITION_TYPE_SCALING_LIMITED = 2;
}

enum MetricSourceType {
  METRIC_SOURCE_TYPE_OBJECT             = 0 [(dev.f110.kubeproto.value) = { value: "Object" }];
  METRIC_SOURCE_TYPE_PODS               = 1 [(dev.f110.kubeproto.value) = { value: "Pods" }];
  METRIC_SOURCE_TYPE_RESOURCE           = 2 [(dev.f110.kubeproto.value) = { value: "Resource" }];
  METRIC_SOURCE_TYPE_CONTAINER_RESOURCE = 3;
  METRIC_SOURCE_TYPE_EXTERNAL           = 4 [(dev.f110.kubeproto.value) = { value: "External" }];
}

enum MetricTargetType {
  METRIC_TARGET_TYPE_UTILIZATION   = 0 [(dev.f110.kubeproto.value) = { value: "Utilization" }];
  METRIC_TARGET_TYPE_VALUE         = 1 [(dev.f110.kubeproto.value) = { value: "Value" }];
  METRIC_TARGET_TYPE_AVERAGE_VALUE = 2;
}

enum ScalingPolicySelect {
  SCALING_POLICY_SELECT_MAX      = 0 [(dev.f110.kubeproto.value) = { value: "Max" }];
  SCALING_POLICY_SELECT_MIN      = 1 [(dev.f110.kubeproto.value) = { value: "Min" }];
  SCALING_POLICY_SELECT_DISABLED = 2 [(dev.f110.kubeproto.value) = { value: "Disabled" }];
}

message ContainerResourceMetricSource {
  // name is the name of the resource in question.
  .k8s.io.api.core.v1.ResourceName name = 1 [(dev.f110.kubeproto.field) = { go_name: "Name", api_field_name: "name", inline: false }];
  // target specifies the target value for the given metric
  MetricTarget target = 2 [(dev.f110.kubeproto.field) = { go_name: "Target", api_field_name: "target", inline: false }];
  // container is the name of the container in the pods of the scaling target
  string container = 3 [(dev.f110.kubeproto.field) = { go_name: "Container", api_field_name: "container", inline: false }];
}

message ContainerResourceMetricStatus {
  // name is the name of the resource in question.
  .k8s.io.api.core.v1.ResourceName name = 1 [(dev.f110.kubeproto.field) = { go_name: "Name", api_field_name: "name", inline: false }];
  // current contains the current value for the given metric
  MetricValueStatus current = 2 [(dev.f110.kubeproto.field) = { go_name: "Current", api_field_name: "current", inline: false }];
  // container is the name of the container in the pods of the scaling target
  string container = 3 [(dev.f110.kubeproto.field) = { go_name: "Container", api_field_name: "container", inline: false }];
}

message CrossVersionObjectReference {
  // kind is the kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  string kind = 1 [(dev.f110.kubeproto.field) = { go_name: "Kind", api_field_name: "kind", inline: false }];
  // name is the name of the referent; More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
  string name = 2 [(dev.f110.kubeproto.field) = { go_name: "Name", api_field_name: "name", inline: false }];
  // apiVersion is the API version of the referent
  optional string api_version = 3 [(dev.f110.kubeproto.field) = { go_name: "APIVersion", api_field_name: "apiVersion", inline: false }];
}

message ExternalMetricSource {
  // metric identifies the target metric by name and selector
  MetricIdentifier metric = 1 [(dev.f110.kubeproto.field) = { go_name: "Metric", api_field_name: "metric", inline: false }];
  // target specifies the target value for the given metric
  MetricTarget target = 2 [(dev.f110.kubeproto.field) = { go_name: "Target", api_field_name: "target", inline: false }];
}

message ExternalMetricStatus {
  // metric identifies the target metric by name and selector
  MetricIdentifier metric = 1 [(dev.f110.kubeproto.field) = { go_name: "Metric", api_field_name: "metric", inline: false }];
  // current contains the current value for the given metric
  MetricValueStatus current = 2 [(dev.f110.kubeproto.field) = { go_name: "Current", api_field_name: "current", inline: false }];
}

message HPAScalingPolicy {
  // type is used to specify the scaling policy.
  HPAScalingPolicyType type = 1 [(dev.f110.kubeproto.field) = { go_name: "Type", api_field_name: "type", inline: false }];
  // value contains the amount of change which is permitted by the policy.
  // It must be greater than zero
  int32 value = 2 [(dev.f110.kubeproto.field) = { go_name: "Value", api_field_name: "value", inline: false }];
  // periodSeconds specifies the window of time for which the policy should hold true.
  // PeriodSeconds must be greater than zero and less than or equal to 1800 (30 min).
  int32 period_seconds = 3 [(dev.f110.kubeproto.field) = { go_name: "PeriodSeconds", api_field_name: "periodSeconds", inline: false }];
}

message HPAScalingRules {
  // stabilizationWindowSeconds is the number of seconds for which past recommendations should be
  // considered while scaling up or scaling down.
  // StabilizationWindowSeconds must be greater than or equal to zero and less than or equal to 3600 (one hour).
  // If not set, use the default values:
  // - For scale up: 0 (i.e. no stabilization is done).
  // - For scale down: 300 (i.e. the stabilization window is 300 seconds long).
  optional int32 stabilization_window_seconds = 1 [(dev.f110.kubeproto.field) = { go_name: "StabilizationWindowSeconds", api_field_name: "stabilizationWindowSeconds", inline: false }];
  // selectPolicy is used to specify which policy should be used.
  // If not set, the default value Max is used.
  optional ScalingPolicySelect select_policy = 2 [(dev.f110.kubeproto.field) = { go_name: "SelectPolicy", api_field_name: "selectPolicy", inline: false }];
  // policies is a list of potential scaling polices which can be used during scaling.
  // At least one policy must be specified, otherwise the HPAScalingRules will be discarded as invalid
  repeated HPAScalingPolicy policies = 3 [(dev.f110.kubeproto.field) = { go_name: "Policies", api_field_name: "policies", inline: false }];
}

message HorizontalPodAutoscaler {
  // spec is the specification for the behaviour of the autoscaler.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
  optional HorizontalPodAutoscalerSpec spec = 3 [(dev.f110.kubeproto.field) = { go_name: "Spec", api_field_name: "spec", inline: false }];
  // status is the current information about the autoscaler.
  optional HorizontalPodAutoscalerStatus status = 4 [(dev.f110.kubeproto.field) = { go_name: "Status", api_field_name: "status", sub_resource: true, inline: false }];

  option (dev.f110.kubeproto.kind) = {
  };
}

message HorizontalPodAutoscalerBehavior {
  // scaleUp is scaling policy for scaling Up.
  // If not set, the default value is the higher of:
  //   * increase no more than 4 pods per 60 seconds
  //   * double the number of pods per 60 seconds
  // No stabilization is used.
  optional HPAScalingRules scale_up = 1 [(dev.f110.kubeproto.field) = { go_name: "ScaleUp", api_field_name: "scaleUp", inline: false }];
  // scaleDown is scaling policy for scaling Down.
  // If not set, the default value is to allow to scale down to minReplicas pods, with a
  // 300 second stabilization window (i.e., the highest recommendation for
  // the last 300sec is used).
  optional HPAScalingRules scale_down = 2 [(dev.f110.kubeproto.field) = { go_name: "ScaleDown", api_field_name: "scaleDown", inline: false }];
}

message HorizontalPodAutoscalerCondition {
  // type describes the current condition
  HorizontalPodAutoscalerConditionType type = 1 [(dev.f110.kubeproto.field) = { go_name: "Type", api_field_name: "type", inline: false }];
  // status is the status of the condition (True, False, Unknown)
  .k8s.io.api.core.v1.ConditionStatus status = 2 [(dev.f110.kubeproto.field) = { go_name: "Status", api_field_name: "status", inline: false }];
  // lastTransitionTime is the last time the condition transitioned from
  // one status to another
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.Time last_transition_time = 3 [(dev.f110.kubeproto.field) = { go_name: "LastTransitionTime", api_field_name: "lastTransitionTime", inline: false }];
  // reason is the reason for the condition's last transition.
  optional string reason = 4 [(dev.f110.kubeproto.field) = { go_name: "Reason", api_field_name: "reason", inline: false }];
  // message is a human-readable explanation containing details about
  // the transition
  optional string message = 5 [(dev.f110.kubeproto.field) = { go_name: "Message", api_field_name: "message", inline: false }];
}

message HorizontalPodAutoscalerList {
  .k8s.io.apimachinery.pkg.apis.meta.v1.TypeMeta type_meta = 1 [(dev.f110.kubeproto.field) = { go_name: "TypeMeta", inline: true }];
  // metadata is the standard list metadata.
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta list_meta = 2 [(dev.f110.kubeproto.field) = { go_name: "ListMeta", api_field_name: "metadata", inline: false }];
  // items is the list of horizontal pod autoscaler objects.
  repeated HorizontalPodAutoscaler items = 3 [(dev.f110.kubeproto.field) = { go_name: "Items", api_field_name: "items", inline: false }];
}

message HorizontalPodAutoscalerSpec {
  // scaleTargetRef points to the target resource to scale, and is used to the pods for which metrics
  // should be collected, as well as to actually change the replica count.
  CrossVersionObjectReference scale_target_ref = 1 [(dev.f110.kubeproto.field) = { go_name: "ScaleTargetRef", api_field_name: "scaleTargetRef", inline: false }];
  // minReplicas is the lower limit for the number of replicas to which the autoscaler
  // can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the
  // alpha feature gate HPAScaleToZero is enabled and at least one Object or External
  // metric is configured.  Scaling is active as long as at least one metric value is
  // available.
  optional int32 min_replicas = 2 [(dev.f110.kubeproto.field) = { go_name: "MinReplicas", api_field_name: "minReplicas", inline: false }];
  // maxReplicas is the upper limit for the number of replicas to which the autoscaler can scale up.
  // It cannot be less that minReplicas.
  int32 max_replicas = 3 [(dev.f110.kubeproto.field) = { go_name: "MaxReplicas", api_field_name: "maxReplicas", inline: false }];
  // metrics contains the specifications for which to use to calculate the
  // desired replica count (the maximum replica count across all metrics will
  // be used).  The desired replica count is calculated multiplying the
  // ratio between the target value and the current value by the current
  // number of pods.  Ergo, metrics used must decrease as the pod count is
  // increased, and vice-versa.  See the individual metric source types for
  // more information about how each type of metric must respond.
  // If not set, the default metric will be set to 80% average CPU utilization.
  repeated MetricSpec metrics = 4 [(dev.f110.kubeproto.field) = { go_name: "Metrics", api_field_name: "metrics", inline: false }];
  // behavior configures the scaling behavior of the target
  // in both Up and Down directions (scaleUp and scaleDown fields respectively).
  // If not set, the default HPAScalingRules for scale up and scale down are used.
  optional HorizontalPodAutoscalerBehavior behavior = 5 [(dev.f110.kubeproto.field) = { go_name: "Behavior", api_field_name: "behavior", inline: false }];
}

message HorizontalPodAutoscalerStatus {
  // observedGeneration is the most recent generation observed by this autoscaler.
  optional int64 observed_generation = 1 [(dev.f110.kubeproto.field) = { go_name: "ObservedGeneration", api_field_name: "observedGeneration", inline: false }];
  // lastScaleTime is the last time the HorizontalPodAutoscaler scaled the number of pods,
  // used by the autoscaler to control how often the number of pods is changed.
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.Time last_scale_time = 2 [(dev.f110.kubeproto.field) = { go_name: "LastScaleTime", api_field_name: "lastScaleTime", inline: false }];
  // currentReplicas is current number of replicas of pods managed by this autoscaler,
  // as last seen by the autoscaler.
  optional int32 current_replicas = 3 [(dev.f110.kubeproto.field) = { go_name: "CurrentReplicas", api_field_name: "currentReplicas", inline: false }];
  // desiredReplicas is the desired number of replicas of pods managed by this autoscaler,
  // as last calculated by the autoscaler.
  int32 desired_replicas = 4 [(dev.f110.kubeproto.field) = { go_name: "DesiredReplicas", api_field_name: "desiredReplicas", inline: false }];
  // currentMetrics is the last read state of the metrics used by this autoscaler.
  repeated MetricStatus current_metrics = 5 [(dev.f110.kubeproto.field) = { go_name: "CurrentMetrics", api_field_name: "currentMetrics", inline: false }];
  // conditions is the set of conditions required for this autoscaler to scale its target,
  // and indicates whether or not those conditions are met.
  repeated HorizontalPodAutoscalerCondition conditions = 6 [(dev.f110.kubeproto.field) = { go_name: "Conditions", api_field_name: "conditions", inline: false }];
}

message MetricIdentifier {
  // name is the name of the given metric
  string name = 1 [(dev.f110.kubeproto.field) = { go_name: "Name", api_field_name: "name", inline: false }];
  // selector is the string-encoded form of a standard kubernetes label selector for the given metric
  // When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping.
  // When unset, just the metricName will be used to gather metrics.
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector selector = 2 [(dev.f110.kubeproto.field) = { go_name: "Selector", api_field_name: "selector", inline: false }];
}

message MetricSpec {
  // type is the type of metric source.  It should be one of "ContainerResource", "External",
  // "Object", "Pods" or "Resource", each mapping to a matching field in the object.
  // Note: "ContainerResource" type is available on when the feature-gate
  // HPAContainerMetrics is enabled
  MetricSourceType type = 1 [(dev.f110.kubeproto.field) = { go_name: "Type", api_field_name: "type", inline: false }];
  // object refers to a metric describing a single kubernetes object
  // (for example, hits-per-second on an Ingress object).
  optional ObjectMetricSource object = 2 [(dev.f110.kubeproto.field) = { go_name: "Object", api_field_name: "object", inline: false }];
  // pods refers to a metric describing each pod in the current scale target
  // (for example, transactions-processed-per-second).  The values will be
  // averaged together before being compared to the target value.
  optional PodsMetricSource pods = 3 [(dev.f110.kubeproto.field) = { go_name: "Pods", api_field_name: "pods", inline: false }];
  // resource refers to a resource metric (such as those specified in
  // requests and limits) known to Kubernetes describing each pod in the
  // current scale target (e.g. CPU or memory). Such metrics are built in to
  // Kubernetes, and have special scaling options on top of those available
  // to normal per-pod metrics using the "pods" source.
  optional ResourceMetricSource resource = 4 [(dev.f110.kubeproto.field) = { go_name: "Resource", api_field_name: "resource", inline: false }];
  // containerResource refers to a resource metric (such as those specified in
  // requests and limits) known to Kubernetes describing a single container in
  // each pod of the current scale target (e.g. CPU or memory). Such metrics are
  // built in to Kubernetes, and have special scaling options on top of those
  // available to normal per-pod metrics using the "pods" source.
  // This is an alpha feature and can be enabled by the HPAContainerMetrics feature flag.
  optional ContainerResourceMetricSource container_resource = 5 [(dev.f110.kubeproto.field) = { go_name: "ContainerResource", api_field_name: "containerResource", inline: false }];
  // external refers to a global metric that is not associated
  // with any Kubernetes object. It allows autoscaling based on information
  // coming from components running outside of cluster
  // (for example length of queue in cloud messaging service, or
  // QPS from loadbalancer running outside of cluster).
  optional ExternalMetricSource external = 6 [(dev.f110.kubeproto.field) = { go_name: "External", api_field_name: "external", inline: false }];
}

message MetricStatus {
  // type is the type of metric source.  It will be one of "ContainerResource", "External",
  // "Object", "Pods" or "Resource", each corresponds to a matching field in the object.
  // Note: "ContainerResource" type is available on when the feature-gate
  // HPAContainerMetrics is enabled
  MetricSourceType type = 1 [(dev.f110.kubeproto.field) = { go_name: "Type", api_field_name: "type", inline: false }];
  // object refers to a metric describing a single kubernetes object
  // (for example, hits-per-second on an Ingress object).
  optional ObjectMetricStatus object = 2 [(dev.f110.kubeproto.field) = { go_name: "Object", api_field_name: "object", inline: false }];
  // pods refers to a metric describing each pod in the current scale target
  // (for example, transactions-processed-per-second).  The values will be
  // averaged together before being compared to the target value.
  optional PodsMetricStatus pods = 3 [(dev.f110.kubeproto.field) = { go_name: "Pods", api_field_name: "pods", inline: false }];
  // resource refers to a resource metric (such as those specified in
  // requests and limits) known to Kubernetes describing each pod in the
  // current scale target (e.g. CPU or memory). Such metrics are built in to
  // Kubernetes, and have special scaling options on top of those available
  // to normal per-pod metrics using the "pods" source.
  optional ResourceMetricStatus resource = 4 [(dev.f110.kubeproto.field) = { go_name: "Resource", api_field_name: "resource", inline: false }];
  // container resource refers to a resource metric (such as those specified in
  // requests and limits) known to Kubernetes describing a single container in each pod in the
  // current scale target (e.g. CPU or memory). Such metrics are built in to
  // Kubernetes, and have special scaling options on top of those available
  // to normal per-pod metrics using the "pods" source.
  optional ContainerResourceMetricStatus container_resource = 5 [(dev.f110.kubeproto.field) = { go_name: "ContainerResource", api_field_name: "containerResource", inline: false }];
  // external refers to a global metric that is not associated
  // with any Kubernetes object. It allows autoscaling based on information
  // coming from components running outside of cluster
  // (for example length of queue in cloud messaging service, or
  // QPS from loadbalancer running outside of cluster).
  optional ExternalMetricStatus external = 6 [(dev.f110.kubeproto.field) = { go_name: "External", api_field_name: "external", inline: false }];
}

message MetricTarget {
  // type represents whether the metric type is Utilization, Value, or AverageValue
  MetricTargetType type = 1 [(dev.f110.kubeproto.field) = { go_name: "Type", api_field_name: "type", inline: false }];
  // value is the target value of the metric (as a quantity).
  optional .k8s.io.apimachinery.pkg.api.resource.Quantity value = 2 [(dev.f110.kubeproto.field) = { go_name: "Value", api_field_name: "value", inline: false }];
  // averageValue is the target value of the average of the
  // metric across all relevant pods (as a quantity)
  optional .k8s.io.apimachinery.pkg.api.resource.Quantity average_value = 3 [(dev.f110.kubeproto.field) = { go_name: "AverageValue", api_field_name: "averageValue", inline: false }];
  // averageUtilization is the target value of the average of the
  // resource metric across all relevant pods, represented as a percentage of
  // the requested value of the resource for the pods.
  // Currently only valid for Resource metric source type
  optional int32 average_utilization = 4 [(dev.f110.kubeproto.field) = { go_name: "AverageUtilization", api_field_name: "averageUtilization", inline: false }];
}

message MetricValueStatus {
  // value is the current value of the metric (as a quantity).
  optional .k8s.io.apimachinery.pkg.api.resource.Quantity value = 1 [(dev.f110.kubeproto.field) = { go_name: "Value", api_field_name: "value", inline: false }];
  // averageValue is the current value of the average of the
  // metric across all relevant pods (as a quantity)
  optional .k8s.io.apimachinery.pkg.api.resource.Quantity average_value = 2 [(dev.f110.kubeproto.field) = { go_name: "AverageValue", api_field_name: "averageValue", inline: false }];
  // currentAverageUtilization is the current value of the average of the
  // resource metric across all relevant pods, represented as a percentage of
  // the requested value of the resource for the pods.
  optional int32 average_utilization = 3 [(dev.f110.kubeproto.field) = { go_name: "AverageUtilization", api_field_name: "averageUtilization", inline: false }];
}

message ObjectMetricSource {
  // describedObject specifies the descriptions of a object,such as kind,name apiVersion
  CrossVersionObjectReference described_object = 1 [(dev.f110.kubeproto.field) = { go_name: "DescribedObject", api_field_name: "describedObject", inline: false }];
  // target specifies the target value for the given metric
  MetricTarget target = 2 [(dev.f110.kubeproto.field) = { go_name: "Target", api_field_name: "target", inline: false }];
  // metric identifies the target metric by name and selector
  MetricIdentifier metric = 3 [(dev.f110.kubeproto.field) = { go_name: "Metric", api_field_name: "metric", inline: false }];
}

message ObjectMetricStatus {
  // metric identifies the target metric by name and selector
  MetricIdentifier metric = 1 [(dev.f110.kubeproto.field) = { go_name: "Metric", api_field_name: "metric", inline: false }];
  // current contains the current value for the given metric
  MetricValueStatus current = 2 [(dev.f110.kubeproto.field) = { go_name: "Current", api_field_name: "current", inline: false }];
  // DescribedObject specifies the descriptions of a object,such as kind,name apiVersion
  CrossVersionObjectReference described_object = 3 [(dev.f110.kubeproto.field) = { go_name: "DescribedObject", api_field_name: "describedObject", inline: false }];
}

message PodsMetricSource {
  // metric identifies the target metric by name and selector
  MetricIdentifier metric = 1 [(dev.f110.kubeproto.field) = { go_name: "Metric", api_field_name: "metric", inline: false }];
  // target specifies the target value for the given metric
  MetricTarget target = 2 [(dev.f110.kubeproto.field) = { go_name: "Target", api_field_name: "target", inline: false }];
}

message PodsMetricStatus {
  // metric identifies the target metric by name and selector
  MetricIdentifier metric = 1 [(dev.f110.kubeproto.field) = { go_name: "Metric", api_field_name: "metric", inline: false }];
  // current contains the current value for the given metric
  MetricValueStatus current = 2 [(dev.f110.kubeproto.field) = { go_name: "Current", api_field_name: "current", inline: false }];
}

message ResourceMetricSource {
  // name is the name of the resource in question.
  .k8s.io.api.core.v1.ResourceName name = 1 [(dev.f110.kubeproto.field) = { go_name: "Name", api_field_name: "name", inline: false }];
  // target specifies the target value for the given metric
  MetricTarget target = 2 [(dev.f110.kubeproto.field) = { go_name: "Target", api_field_name: "target", inline: false }];
}

message ResourceMetricStatus {
  // name is the name of the resource in question.
  .k8s.io.api.core.v1.ResourceName name = 1 [(dev.f110.kubeproto.field) = { go_name: "Name", api_field_name: "name", inline: false }];
  // current contains the current value for the given metric
  MetricValueStatus current = 2 [(dev.f110.kubeproto.field) = { go_name: "Current", api_field_name: "current", inline: false }];
}
