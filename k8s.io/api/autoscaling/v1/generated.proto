// Generated by: gen-go-to-protobuf
syntax = "proto3";
package k8s.io.api.autoscaling.v1;
option  go_package              = "k8s.io/api/autoscaling/v1";
option (dev.f110.kubeproto.k8s) = {
  domain: "autoscaling",
  version: "v1",
};
option (dev.f110.kubeproto.kubeproto_go_package) = "go.f110.dev/kubeproto/go/apis/autoscalingv1";

import "kube.proto";
import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/apimachinery/pkg/api/resource/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";

enum HorizontalPodAutoscalerConditionType {
  HORIZONTAL_POD_AUTOSCALER_CONDITION_TYPE_SCALING_ACTIVE  = 0;
  HORIZONTAL_POD_AUTOSCALER_CONDITION_TYPE_ABLE_TO_SCALE   = 1;
  HORIZONTAL_POD_AUTOSCALER_CONDITION_TYPE_SCALING_LIMITED = 2;
}

enum MetricSourceType {
  METRIC_SOURCE_TYPE_OBJECT             = 0 [(dev.f110.kubeproto.value) = { value: "Object" }];
  METRIC_SOURCE_TYPE_PODS               = 1 [(dev.f110.kubeproto.value) = { value: "Pods" }];
  METRIC_SOURCE_TYPE_RESOURCE           = 2 [(dev.f110.kubeproto.value) = { value: "Resource" }];
  METRIC_SOURCE_TYPE_CONTAINER_RESOURCE = 3;
  METRIC_SOURCE_TYPE_EXTERNAL           = 4 [(dev.f110.kubeproto.value) = { value: "External" }];
}

message ContainerResourceMetricSource {
  // name is the name of the resource in question.
  .k8s.io.api.core.v1.ResourceName name = 1 [(dev.f110.kubeproto.field) = { go_name: "Name", api_field_name: "name", inline: false }];
  // targetAverageUtilization is the target value of the average of the
  // resource metric across all relevant pods, represented as a percentage of
  // the requested value of the resource for the pods.
  optional int32 target_average_utilization = 2 [(dev.f110.kubeproto.field) = { go_name: "TargetAverageUtilization", api_field_name: "targetAverageUtilization", inline: false }];
  // targetAverageValue is the target value of the average of the
  // resource metric across all relevant pods, as a raw value (instead of as
  // a percentage of the request), similar to the "pods" metric source type.
  optional .k8s.io.apimachinery.pkg.api.resource.Quantity target_average_value = 3 [(dev.f110.kubeproto.field) = { go_name: "TargetAverageValue", api_field_name: "targetAverageValue", inline: false }];
  // container is the name of the container in the pods of the scaling target.
  string container = 4 [(dev.f110.kubeproto.field) = { go_name: "Container", api_field_name: "container", inline: false }];
}

message ContainerResourceMetricStatus {
  // name is the name of the resource in question.
  .k8s.io.api.core.v1.ResourceName name = 1 [(dev.f110.kubeproto.field) = { go_name: "Name", api_field_name: "name", inline: false }];
  // currentAverageUtilization is the current value of the average of the
  // resource metric across all relevant pods, represented as a percentage of
  // the requested value of the resource for the pods.  It will only be
  // present if `targetAverageValue` was set in the corresponding metric
  // specification.
  optional int32 current_average_utilization = 2 [(dev.f110.kubeproto.field) = { go_name: "CurrentAverageUtilization", api_field_name: "currentAverageUtilization", inline: false }];
  // currentAverageValue is the current value of the average of the
  // resource metric across all relevant pods, as a raw value (instead of as
  // a percentage of the request), similar to the "pods" metric source type.
  // It will always be set, regardless of the corresponding metric specification.
  .k8s.io.apimachinery.pkg.api.resource.Quantity current_average_value = 3 [(dev.f110.kubeproto.field) = { go_name: "CurrentAverageValue", api_field_name: "currentAverageValue", inline: false }];
  // container is the name of the container in the pods of the scaling taget
  string container = 4 [(dev.f110.kubeproto.field) = { go_name: "Container", api_field_name: "container", inline: false }];
}

message CrossVersionObjectReference {
  // kind is the kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  string kind = 1 [(dev.f110.kubeproto.field) = { go_name: "Kind", api_field_name: "kind", inline: false }];
  // name is the name of the referent; More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
  string name = 2 [(dev.f110.kubeproto.field) = { go_name: "Name", api_field_name: "name", inline: false }];
  // apiVersion is the API version of the referent
  optional string api_version = 3 [(dev.f110.kubeproto.field) = { go_name: "APIVersion", api_field_name: "apiVersion", inline: false }];
}

message ExternalMetricSource {
  // metricName is the name of the metric in question.
  string metric_name = 1 [(dev.f110.kubeproto.field) = { go_name: "MetricName", api_field_name: "metricName", inline: false }];
  // metricSelector is used to identify a specific time series
  // within a given metric.
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector metric_selector = 2 [(dev.f110.kubeproto.field) = { go_name: "MetricSelector", api_field_name: "metricSelector", inline: false }];
  // targetValue is the target value of the metric (as a quantity).
  // Mutually exclusive with TargetAverageValue.
  optional .k8s.io.apimachinery.pkg.api.resource.Quantity target_value = 3 [(dev.f110.kubeproto.field) = { go_name: "TargetValue", api_field_name: "targetValue", inline: false }];
  // targetAverageValue is the target per-pod value of global metric (as a quantity).
  // Mutually exclusive with TargetValue.
  optional .k8s.io.apimachinery.pkg.api.resource.Quantity target_average_value = 4 [(dev.f110.kubeproto.field) = { go_name: "TargetAverageValue", api_field_name: "targetAverageValue", inline: false }];
}

message ExternalMetricStatus {
  // metricName is the name of a metric used for autoscaling in
  // metric system.
  string metric_name = 1 [(dev.f110.kubeproto.field) = { go_name: "MetricName", api_field_name: "metricName", inline: false }];
  // metricSelector is used to identify a specific time series
  // within a given metric.
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector metric_selector = 2 [(dev.f110.kubeproto.field) = { go_name: "MetricSelector", api_field_name: "metricSelector", inline: false }];
  // currentValue is the current value of the metric (as a quantity)
  .k8s.io.apimachinery.pkg.api.resource.Quantity current_value = 3 [(dev.f110.kubeproto.field) = { go_name: "CurrentValue", api_field_name: "currentValue", inline: false }];
  // currentAverageValue is the current value of metric averaged over autoscaled pods.
  optional .k8s.io.apimachinery.pkg.api.resource.Quantity current_average_value = 4 [(dev.f110.kubeproto.field) = { go_name: "CurrentAverageValue", api_field_name: "currentAverageValue", inline: false }];
}

message HorizontalPodAutoscaler {
  // spec defines the behaviour of autoscaler. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
  optional HorizontalPodAutoscalerSpec spec = 3 [(dev.f110.kubeproto.field) = { go_name: "Spec", api_field_name: "spec", inline: false }];
  // status is the current information about the autoscaler.
  optional HorizontalPodAutoscalerStatus status = 4 [(dev.f110.kubeproto.field) = { go_name: "Status", api_field_name: "status", sub_resource: true, inline: false }];

  option (dev.f110.kubeproto.kind) = {
  };
}

message HorizontalPodAutoscalerCondition {
  // type describes the current condition
  HorizontalPodAutoscalerConditionType type = 1 [(dev.f110.kubeproto.field) = { go_name: "Type", api_field_name: "type", inline: false }];
  // status is the status of the condition (True, False, Unknown)
  .k8s.io.api.core.v1.ConditionStatus status = 2 [(dev.f110.kubeproto.field) = { go_name: "Status", api_field_name: "status", inline: false }];
  // lastTransitionTime is the last time the condition transitioned from
  // one status to another
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.Time last_transition_time = 3 [(dev.f110.kubeproto.field) = { go_name: "LastTransitionTime", api_field_name: "lastTransitionTime", inline: false }];
  // reason is the reason for the condition's last transition.
  optional string reason = 4 [(dev.f110.kubeproto.field) = { go_name: "Reason", api_field_name: "reason", inline: false }];
  // message is a human-readable explanation containing details about
  // the transition
  optional string message = 5 [(dev.f110.kubeproto.field) = { go_name: "Message", api_field_name: "message", inline: false }];
}

message HorizontalPodAutoscalerList {
  .k8s.io.apimachinery.pkg.apis.meta.v1.TypeMeta type_meta = 1 [(dev.f110.kubeproto.field) = { go_name: "TypeMeta", inline: true }];
  // Standard list metadata.
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta list_meta = 2 [(dev.f110.kubeproto.field) = { go_name: "ListMeta", api_field_name: "metadata", inline: false }];
  // items is the list of horizontal pod autoscaler objects.
  repeated HorizontalPodAutoscaler items = 3 [(dev.f110.kubeproto.field) = { go_name: "Items", api_field_name: "items", inline: false }];
}

message HorizontalPodAutoscalerSpec {
  // reference to scaled resource; horizontal pod autoscaler will learn the current resource consumption
  // and will set the desired number of pods by using its Scale subresource.
  CrossVersionObjectReference scale_target_ref = 1 [(dev.f110.kubeproto.field) = { go_name: "ScaleTargetRef", api_field_name: "scaleTargetRef", inline: false }];
  // minReplicas is the lower limit for the number of replicas to which the autoscaler
  // can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the
  // alpha feature gate HPAScaleToZero is enabled and at least one Object or External
  // metric is configured.  Scaling is active as long as at least one metric value is
  // available.
  optional int32 min_replicas = 2 [(dev.f110.kubeproto.field) = { go_name: "MinReplicas", api_field_name: "minReplicas", inline: false }];
  // maxReplicas is the upper limit for the number of pods that can be set by the autoscaler; cannot be smaller than MinReplicas.
  int32 max_replicas = 3 [(dev.f110.kubeproto.field) = { go_name: "MaxReplicas", api_field_name: "maxReplicas", inline: false }];
  // targetCPUUtilizationPercentage is the target average CPU utilization (represented as a percentage of requested CPU) over all the pods;
  // if not specified the default autoscaling policy will be used.
  optional int32 target_c_p_u_utilization_percentage = 4 [(dev.f110.kubeproto.field) = { go_name: "TargetCPUUtilizationPercentage", api_field_name: "targetCPUUtilizationPercentage", inline: false }];
}

message HorizontalPodAutoscalerStatus {
  // observedGeneration is the most recent generation observed by this autoscaler.
  optional int64 observed_generation = 1 [(dev.f110.kubeproto.field) = { go_name: "ObservedGeneration", api_field_name: "observedGeneration", inline: false }];
  // lastScaleTime is the last time the HorizontalPodAutoscaler scaled the number of pods;
  // used by the autoscaler to control how often the number of pods is changed.
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.Time last_scale_time = 2 [(dev.f110.kubeproto.field) = { go_name: "LastScaleTime", api_field_name: "lastScaleTime", inline: false }];
  // currentReplicas is the current number of replicas of pods managed by this autoscaler.
  int32 current_replicas = 3 [(dev.f110.kubeproto.field) = { go_name: "CurrentReplicas", api_field_name: "currentReplicas", inline: false }];
  // desiredReplicas is the  desired number of replicas of pods managed by this autoscaler.
  int32 desired_replicas = 4 [(dev.f110.kubeproto.field) = { go_name: "DesiredReplicas", api_field_name: "desiredReplicas", inline: false }];
  // currentCPUUtilizationPercentage is the current average CPU utilization over all pods, represented as a percentage of requested CPU,
  // e.g. 70 means that an average pod is using now 70% of its requested CPU.
  optional int32 current_c_p_u_utilization_percentage = 5 [(dev.f110.kubeproto.field) = { go_name: "CurrentCPUUtilizationPercentage", api_field_name: "currentCPUUtilizationPercentage", inline: false }];
}

message MetricSpec {
  // type is the type of metric source.  It should be one of "ContainerResource",
  // "External", "Object", "Pods" or "Resource", each mapping to a matching field in the object.
  MetricSourceType type = 1 [(dev.f110.kubeproto.field) = { go_name: "Type", api_field_name: "type", inline: false }];
  // object refers to a metric describing a single kubernetes object
  // (for example, hits-per-second on an Ingress object).
  optional ObjectMetricSource object = 2 [(dev.f110.kubeproto.field) = { go_name: "Object", api_field_name: "object", inline: false }];
  // pods refers to a metric describing each pod in the current scale target
  // (for example, transactions-processed-per-second).  The values will be
  // averaged together before being compared to the target value.
  optional PodsMetricSource pods = 3 [(dev.f110.kubeproto.field) = { go_name: "Pods", api_field_name: "pods", inline: false }];
  // resource refers to a resource metric (such as those specified in
  // requests and limits) known to Kubernetes describing each pod in the
  // current scale target (e.g. CPU or memory). Such metrics are built in to
  // Kubernetes, and have special scaling options on top of those available
  // to normal per-pod metrics using the "pods" source.
  optional ResourceMetricSource resource = 4 [(dev.f110.kubeproto.field) = { go_name: "Resource", api_field_name: "resource", inline: false }];
  // containerResource refers to a resource metric (such as those specified in
  // requests and limits) known to Kubernetes describing a single container in each pod of the
  // current scale target (e.g. CPU or memory). Such metrics are built in to
  // Kubernetes, and have special scaling options on top of those available
  // to normal per-pod metrics using the "pods" source.
  optional ContainerResourceMetricSource container_resource = 5 [(dev.f110.kubeproto.field) = { go_name: "ContainerResource", api_field_name: "containerResource", inline: false }];
  // external refers to a global metric that is not associated
  // with any Kubernetes object. It allows autoscaling based on information
  // coming from components running outside of cluster
  // (for example length of queue in cloud messaging service, or
  // QPS from loadbalancer running outside of cluster).
  optional ExternalMetricSource external = 6 [(dev.f110.kubeproto.field) = { go_name: "External", api_field_name: "external", inline: false }];
}

message MetricStatus {
  // type is the type of metric source.  It will be one of "ContainerResource",
  // "External", "Object", "Pods" or "Resource", each corresponds to a matching field in the object.
  MetricSourceType type = 1 [(dev.f110.kubeproto.field) = { go_name: "Type", api_field_name: "type", inline: false }];
  // object refers to a metric describing a single kubernetes object
  // (for example, hits-per-second on an Ingress object).
  optional ObjectMetricStatus object = 2 [(dev.f110.kubeproto.field) = { go_name: "Object", api_field_name: "object", inline: false }];
  // pods refers to a metric describing each pod in the current scale target
  // (for example, transactions-processed-per-second).  The values will be
  // averaged together before being compared to the target value.
  optional PodsMetricStatus pods = 3 [(dev.f110.kubeproto.field) = { go_name: "Pods", api_field_name: "pods", inline: false }];
  // resource refers to a resource metric (such as those specified in
  // requests and limits) known to Kubernetes describing each pod in the
  // current scale target (e.g. CPU or memory). Such metrics are built in to
  // Kubernetes, and have special scaling options on top of those available
  // to normal per-pod metrics using the "pods" source.
  optional ResourceMetricStatus resource = 4 [(dev.f110.kubeproto.field) = { go_name: "Resource", api_field_name: "resource", inline: false }];
  // containerResource refers to a resource metric (such as those specified in
  // requests and limits) known to Kubernetes describing a single container in each pod in the
  // current scale target (e.g. CPU or memory). Such metrics are built in to
  // Kubernetes, and have special scaling options on top of those available
  // to normal per-pod metrics using the "pods" source.
  optional ContainerResourceMetricStatus container_resource = 5 [(dev.f110.kubeproto.field) = { go_name: "ContainerResource", api_field_name: "containerResource", inline: false }];
  // external refers to a global metric that is not associated
  // with any Kubernetes object. It allows autoscaling based on information
  // coming from components running outside of cluster
  // (for example length of queue in cloud messaging service, or
  // QPS from loadbalancer running outside of cluster).
  optional ExternalMetricStatus external = 6 [(dev.f110.kubeproto.field) = { go_name: "External", api_field_name: "external", inline: false }];
}

message ObjectMetricSource {
  // target is the described Kubernetes object.
  CrossVersionObjectReference target = 1 [(dev.f110.kubeproto.field) = { go_name: "Target", api_field_name: "target", inline: false }];
  // metricName is the name of the metric in question.
  string metric_name = 2 [(dev.f110.kubeproto.field) = { go_name: "MetricName", api_field_name: "metricName", inline: false }];
  // targetValue is the target value of the metric (as a quantity).
  .k8s.io.apimachinery.pkg.api.resource.Quantity target_value = 3 [(dev.f110.kubeproto.field) = { go_name: "TargetValue", api_field_name: "targetValue", inline: false }];
  // selector is the string-encoded form of a standard kubernetes label selector for the given metric.
  // When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping
  // When unset, just the metricName will be used to gather metrics.
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector selector = 4 [(dev.f110.kubeproto.field) = { go_name: "Selector", api_field_name: "selector", inline: false }];
  // averageValue is the target value of the average of the
  // metric across all relevant pods (as a quantity)
  optional .k8s.io.apimachinery.pkg.api.resource.Quantity average_value = 5 [(dev.f110.kubeproto.field) = { go_name: "AverageValue", api_field_name: "averageValue", inline: false }];
}

message ObjectMetricStatus {
  // target is the described Kubernetes object.
  CrossVersionObjectReference target = 1 [(dev.f110.kubeproto.field) = { go_name: "Target", api_field_name: "target", inline: false }];
  // metricName is the name of the metric in question.
  string metric_name = 2 [(dev.f110.kubeproto.field) = { go_name: "MetricName", api_field_name: "metricName", inline: false }];
  // currentValue is the current value of the metric (as a quantity).
  .k8s.io.apimachinery.pkg.api.resource.Quantity current_value = 3 [(dev.f110.kubeproto.field) = { go_name: "CurrentValue", api_field_name: "currentValue", inline: false }];
  // selector is the string-encoded form of a standard kubernetes label selector for the given metric
  // When set in the ObjectMetricSource, it is passed as an additional parameter to the metrics server for more specific metrics scoping.
  // When unset, just the metricName will be used to gather metrics.
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector selector = 4 [(dev.f110.kubeproto.field) = { go_name: "Selector", api_field_name: "selector", inline: false }];
  // averageValue is the current value of the average of the
  // metric across all relevant pods (as a quantity)
  optional .k8s.io.apimachinery.pkg.api.resource.Quantity average_value = 5 [(dev.f110.kubeproto.field) = { go_name: "AverageValue", api_field_name: "averageValue", inline: false }];
}

message PodsMetricSource {
  // metricName is the name of the metric in question
  string metric_name = 1 [(dev.f110.kubeproto.field) = { go_name: "MetricName", api_field_name: "metricName", inline: false }];
  // targetAverageValue is the target value of the average of the
  // metric across all relevant pods (as a quantity)
  .k8s.io.apimachinery.pkg.api.resource.Quantity target_average_value = 2 [(dev.f110.kubeproto.field) = { go_name: "TargetAverageValue", api_field_name: "targetAverageValue", inline: false }];
  // selector is the string-encoded form of a standard kubernetes label selector for the given metric
  // When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping
  // When unset, just the metricName will be used to gather metrics.
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector selector = 3 [(dev.f110.kubeproto.field) = { go_name: "Selector", api_field_name: "selector", inline: false }];
}

message PodsMetricStatus {
  // metricName is the name of the metric in question
  string metric_name = 1 [(dev.f110.kubeproto.field) = { go_name: "MetricName", api_field_name: "metricName", inline: false }];
  // currentAverageValue is the current value of the average of the
  // metric across all relevant pods (as a quantity)
  .k8s.io.apimachinery.pkg.api.resource.Quantity current_average_value = 2 [(dev.f110.kubeproto.field) = { go_name: "CurrentAverageValue", api_field_name: "currentAverageValue", inline: false }];
  // selector is the string-encoded form of a standard kubernetes label selector for the given metric
  // When set in the PodsMetricSource, it is passed as an additional parameter to the metrics server for more specific metrics scoping.
  // When unset, just the metricName will be used to gather metrics.
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector selector = 3 [(dev.f110.kubeproto.field) = { go_name: "Selector", api_field_name: "selector", inline: false }];
}

message ResourceMetricSource {
  // name is the name of the resource in question.
  .k8s.io.api.core.v1.ResourceName name = 1 [(dev.f110.kubeproto.field) = { go_name: "Name", api_field_name: "name", inline: false }];
  // targetAverageUtilization is the target value of the average of the
  // resource metric across all relevant pods, represented as a percentage of
  // the requested value of the resource for the pods.
  optional int32 target_average_utilization = 2 [(dev.f110.kubeproto.field) = { go_name: "TargetAverageUtilization", api_field_name: "targetAverageUtilization", inline: false }];
  // targetAverageValue is the target value of the average of the
  // resource metric across all relevant pods, as a raw value (instead of as
  // a percentage of the request), similar to the "pods" metric source type.
  optional .k8s.io.apimachinery.pkg.api.resource.Quantity target_average_value = 3 [(dev.f110.kubeproto.field) = { go_name: "TargetAverageValue", api_field_name: "targetAverageValue", inline: false }];
}

message ResourceMetricStatus {
  // name is the name of the resource in question.
  .k8s.io.api.core.v1.ResourceName name = 1 [(dev.f110.kubeproto.field) = { go_name: "Name", api_field_name: "name", inline: false }];
  // currentAverageUtilization is the current value of the average of the
  // resource metric across all relevant pods, represented as a percentage of
  // the requested value of the resource for the pods.  It will only be
  // present if `targetAverageValue` was set in the corresponding metric
  // specification.
  optional int32 current_average_utilization = 2 [(dev.f110.kubeproto.field) = { go_name: "CurrentAverageUtilization", api_field_name: "currentAverageUtilization", inline: false }];
  // currentAverageValue is the current value of the average of the
  // resource metric across all relevant pods, as a raw value (instead of as
  // a percentage of the request), similar to the "pods" metric source type.
  // It will always be set, regardless of the corresponding metric specification.
  .k8s.io.apimachinery.pkg.api.resource.Quantity current_average_value = 3 [(dev.f110.kubeproto.field) = { go_name: "CurrentAverageValue", api_field_name: "currentAverageValue", inline: false }];
}

message Scale {
  // spec defines the behavior of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
  optional ScaleSpec spec = 3 [(dev.f110.kubeproto.field) = { go_name: "Spec", api_field_name: "spec", inline: false }];
  // status is the current status of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status. Read-only.
  optional ScaleStatus status = 4 [(dev.f110.kubeproto.field) = { go_name: "Status", api_field_name: "status", sub_resource: true, inline: false }];

  option (dev.f110.kubeproto.kind) = {
  };
}

message ScaleSpec {
  // replicas is the desired number of instances for the scaled object.
  optional int32 replicas = 1 [(dev.f110.kubeproto.field) = { go_name: "Replicas", api_field_name: "replicas", inline: false }];
}

message ScaleStatus {
  // replicas is the actual number of observed instances of the scaled object.
  int32 replicas = 1 [(dev.f110.kubeproto.field) = { go_name: "Replicas", api_field_name: "replicas", inline: false }];
  // selector is the label query over pods that should match the replicas count. This is same
  // as the label selector but in the string format to avoid introspection
  // by clients. The string will be in the same format as the query-param syntax.
  // More info about label selectors: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
  optional string selector = 2 [(dev.f110.kubeproto.field) = { go_name: "Selector", api_field_name: "selector", inline: false }];
}
