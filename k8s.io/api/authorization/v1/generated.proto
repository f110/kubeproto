// Generated by: gen-go-to-protobuf
syntax = "proto3";
package k8s.io.api.authorization.v1;
option  go_package              = "k8s.io/api/authorization/v1";
option (dev.f110.kubeproto.k8s) = {
  domain: "authorization.k8s.io",
  version: "v1",
};
option (dev.f110.kubeproto.kubeproto_go_package) = "go.f110.dev/kubeproto/go/apis/authorizationv1";

import "kube.proto";

message ExtraValue {
  repeated string items = 1 [(dev.f110.kubeproto.field) = { go_name: "", inline: false }];
}

message LocalSubjectAccessReview {
  // Spec holds information about the request being evaluated.  spec.namespace must be equal to the namespace
  // you made the request against.  If empty, it is defaulted.
  SubjectAccessReviewSpec spec = 3 [(dev.f110.kubeproto.field) = { go_name: "Spec", api_field_name: "spec", inline: false }];
  // Status is filled in by the server and indicates whether the request is allowed or not
  optional SubjectAccessReviewStatus status = 4 [(dev.f110.kubeproto.field) = { go_name: "Status", api_field_name: "status", inline: false }];

  option (dev.f110.kubeproto.kind) = {
  };
}

message NonResourceAttributes {
  // Path is the URL path of the request
  optional string path = 1 [(dev.f110.kubeproto.field) = { go_name: "Path", api_field_name: "path", inline: false }];
  // Verb is the standard HTTP verb
  optional string verb = 2 [(dev.f110.kubeproto.field) = { go_name: "Verb", api_field_name: "verb", inline: false }];
}

message NonResourceRule {
  // Verb is a list of kubernetes non-resource API verbs, like: get, post, put, delete, patch, head, options.  "*" means all.
  repeated string verbs = 1 [(dev.f110.kubeproto.field) = { go_name: "Verbs", api_field_name: "verbs", inline: false }];
  // NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full,
  // final step in the path.  "*" means all.
  repeated string non_resource_url_s = 2 [(dev.f110.kubeproto.field) = { go_name: "NonResourceURLs", api_field_name: "nonResourceURLs", inline: false }];
}

message ResourceAttributes {
  // Namespace is the namespace of the action being requested.  Currently, there is no distinction between no namespace and all namespaces
  // "" (empty) is defaulted for LocalSubjectAccessReviews
  // "" (empty) is empty for cluster-scoped resources
  // "" (empty) means "all" for namespace scoped resources from a SubjectAccessReview or SelfSubjectAccessReview
  optional string namespace = 1 [(dev.f110.kubeproto.field) = { go_name: "Namespace", api_field_name: "namespace", inline: false }];
  // Verb is a kubernetes resource API verb, like: get, list, watch, create, update, delete, proxy.  "*" means all.
  optional string verb = 2 [(dev.f110.kubeproto.field) = { go_name: "Verb", api_field_name: "verb", inline: false }];
  // Group is the API Group of the Resource.  "*" means all.
  optional string group = 3 [(dev.f110.kubeproto.field) = { go_name: "Group", api_field_name: "group", inline: false }];
  // Version is the API Version of the Resource.  "*" means all.
  optional string version = 4 [(dev.f110.kubeproto.field) = { go_name: "Version", api_field_name: "version", inline: false }];
  // Resource is one of the existing resource types.  "*" means all.
  optional string resource = 5 [(dev.f110.kubeproto.field) = { go_name: "Resource", api_field_name: "resource", inline: false }];
  // Subresource is one of the existing resource types.  "" means none.
  optional string subresource = 6 [(dev.f110.kubeproto.field) = { go_name: "Subresource", api_field_name: "subresource", inline: false }];
  // Name is the name of the resource being requested for a "get" or deleted for a "delete". "" (empty) means all.
  optional string name = 7 [(dev.f110.kubeproto.field) = { go_name: "Name", api_field_name: "name", inline: false }];
}

message ResourceRule {
  // Verb is a list of kubernetes resource API verbs, like: get, list, watch, create, update, delete, proxy.  "*" means all.
  repeated string verbs = 1 [(dev.f110.kubeproto.field) = { go_name: "Verbs", api_field_name: "verbs", inline: false }];
  // APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of
  // the enumerated resources in any API group will be allowed.  "*" means all.
  repeated string api_groups = 2 [(dev.f110.kubeproto.field) = { go_name: "APIGroups", api_field_name: "apiGroups", inline: false }];
  // Resources is a list of resources this rule applies to.  "*" means all in the specified apiGroups.
  //  "*/foo" represents the subresource 'foo' for all resources in the specified apiGroups.
  repeated string resources = 3 [(dev.f110.kubeproto.field) = { go_name: "Resources", api_field_name: "resources", inline: false }];
  // ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.  "*" means all.
  repeated string resource_names = 4 [(dev.f110.kubeproto.field) = { go_name: "ResourceNames", api_field_name: "resourceNames", inline: false }];
}

message SelfSubjectAccessReview {
  // Spec holds information about the request being evaluated.  user and groups must be empty
  SelfSubjectAccessReviewSpec spec = 3 [(dev.f110.kubeproto.field) = { go_name: "Spec", api_field_name: "spec", inline: false }];
  // Status is filled in by the server and indicates whether the request is allowed or not
  optional SubjectAccessReviewStatus status = 4 [(dev.f110.kubeproto.field) = { go_name: "Status", api_field_name: "status", inline: false }];

  option (dev.f110.kubeproto.kind) = {
    scope: SCOPE_CLUSTER
  };
}

message SelfSubjectAccessReviewSpec {
  // ResourceAuthorizationAttributes describes information for a resource access request
  optional ResourceAttributes resource_attributes = 1 [(dev.f110.kubeproto.field) = { go_name: "ResourceAttributes", api_field_name: "resourceAttributes", inline: false }];
  // NonResourceAttributes describes information for a non-resource access request
  optional NonResourceAttributes non_resource_attributes = 2 [(dev.f110.kubeproto.field) = { go_name: "NonResourceAttributes", api_field_name: "nonResourceAttributes", inline: false }];
}

message SelfSubjectRulesReview {
  // Spec holds information about the request being evaluated.
  SelfSubjectRulesReviewSpec spec = 3 [(dev.f110.kubeproto.field) = { go_name: "Spec", api_field_name: "spec", inline: false }];
  // Status is filled in by the server and indicates the set of actions a user can perform.
  optional SubjectRulesReviewStatus status = 4 [(dev.f110.kubeproto.field) = { go_name: "Status", api_field_name: "status", inline: false }];

  option (dev.f110.kubeproto.kind) = {
    scope: SCOPE_CLUSTER
  };
}

message SelfSubjectRulesReviewSpec {
  // Namespace to evaluate rules for. Required.
  optional string namespace = 1 [(dev.f110.kubeproto.field) = { go_name: "Namespace", api_field_name: "namespace", inline: false }];
}

message SubjectAccessReview {
  // Spec holds information about the request being evaluated
  SubjectAccessReviewSpec spec = 3 [(dev.f110.kubeproto.field) = { go_name: "Spec", api_field_name: "spec", inline: false }];
  // Status is filled in by the server and indicates whether the request is allowed or not
  optional SubjectAccessReviewStatus status = 4 [(dev.f110.kubeproto.field) = { go_name: "Status", api_field_name: "status", inline: false }];

  option (dev.f110.kubeproto.kind) = {
    scope: SCOPE_CLUSTER
  };
}

message SubjectAccessReviewSpec {
  // ResourceAuthorizationAttributes describes information for a resource access request
  optional ResourceAttributes resource_attributes = 1 [(dev.f110.kubeproto.field) = { go_name: "ResourceAttributes", api_field_name: "resourceAttributes", inline: false }];
  // NonResourceAttributes describes information for a non-resource access request
  optional NonResourceAttributes non_resource_attributes = 2 [(dev.f110.kubeproto.field) = { go_name: "NonResourceAttributes", api_field_name: "nonResourceAttributes", inline: false }];
  // User is the user you're testing for.
  // If you specify "User" but not "Groups", then is it interpreted as "What if User were not a member of any groups
  optional string user = 3 [(dev.f110.kubeproto.field) = { go_name: "User", api_field_name: "user", inline: false }];
  // Groups is the groups you're testing for.
  repeated string groups = 4 [(dev.f110.kubeproto.field) = { go_name: "Groups", api_field_name: "groups", inline: false }];
  // Extra corresponds to the user.Info.GetExtra() method from the authenticator.  Since that is input to the authorizer
  // it needs a reflection here.
  map<string, ExtraValue> extra = 5 [(dev.f110.kubeproto.field) = { go_name: "Extra", api_field_name: "extra", inline: false }];
  // UID information about the requesting user.
  optional string uid = 6 [(dev.f110.kubeproto.field) = { go_name: "UID", api_field_name: "uid", inline: false }];
}

message SubjectAccessReviewStatus {
  // Allowed is required. True if the action would be allowed, false otherwise.
  bool allowed = 1 [(dev.f110.kubeproto.field) = { go_name: "Allowed", api_field_name: "allowed", inline: false }];
  // Denied is optional. True if the action would be denied, otherwise
  // false. If both allowed is false and denied is false, then the
  // authorizer has no opinion on whether to authorize the action. Denied
  // may not be true if Allowed is true.
  optional bool denied = 2 [(dev.f110.kubeproto.field) = { go_name: "Denied", api_field_name: "denied", inline: false }];
  // Reason is optional.  It indicates why a request was allowed or denied.
  optional string reason = 3 [(dev.f110.kubeproto.field) = { go_name: "Reason", api_field_name: "reason", inline: false }];
  // EvaluationError is an indication that some error occurred during the authorization check.
  // It is entirely possible to get an error and be able to continue determine authorization status in spite of it.
  // For instance, RBAC can be missing a role, but enough roles are still present and bound to reason about the request.
  optional string evaluation_error = 4 [(dev.f110.kubeproto.field) = { go_name: "EvaluationError", api_field_name: "evaluationError", inline: false }];
}

message SubjectRulesReviewStatus {
  // ResourceRules is the list of actions the subject is allowed to perform on resources.
  // The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
  repeated ResourceRule resource_rules = 1 [(dev.f110.kubeproto.field) = { go_name: "ResourceRules", api_field_name: "resourceRules", inline: false }];
  // NonResourceRules is the list of actions the subject is allowed to perform on non-resources.
  // The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
  repeated NonResourceRule non_resource_rules = 2 [(dev.f110.kubeproto.field) = { go_name: "NonResourceRules", api_field_name: "nonResourceRules", inline: false }];
  // Incomplete is true when the rules returned by this call are incomplete. This is most commonly
  // encountered when an authorizer, such as an external authorizer, doesn't support rules evaluation.
  bool incomplete = 3 [(dev.f110.kubeproto.field) = { go_name: "Incomplete", api_field_name: "incomplete", inline: false }];
  // EvaluationError can appear in combination with Rules. It indicates an error occurred during
  // rule evaluation, such as an authorizer that doesn't support rule evaluation, and that
  // ResourceRules and/or NonResourceRules may be incomplete.
  optional string evaluation_error = 4 [(dev.f110.kubeproto.field) = { go_name: "EvaluationError", api_field_name: "evaluationError", inline: false }];
}
