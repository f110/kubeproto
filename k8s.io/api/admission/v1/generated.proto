// Generated by: gen-go-to-protobuf
syntax = "proto3";
package k8s.io.api.admission.v1;
option  go_package              = "k8s.io/api/admission/v1";
option (dev.f110.kubeproto.k8s) = {
  domain: "admission.k8s.io",
  version: "v1",
};
option (dev.f110.kubeproto.kubeproto_go_package) = "go.f110.dev/kubeproto/go/apis/admissionv1";

import "kube.proto";
import "k8s.io/api/authentication/v1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";

enum Operation {
  OPERATION_CREATE  = 0;
  OPERATION_UPDATE  = 1;
  OPERATION_DELETE  = 2;
  OPERATION_CONNECT = 3;
}

enum PatchType {
  PATCH_TYPE_JSON_PATCH = 0 [(dev.f110.kubeproto.value) = { value: "JSONPatch" }];
}

message AdmissionRequest {
  // UID is an identifier for the individual request/response. It allows us to distinguish instances of requests which are
  // otherwise identical (parallel requests, requests when earlier requests did not modify etc)
  // The UID is meant to track the round trip (request/response) between the KAS and the WebHook, not the user request.
  // It is suitable for correlating log entries between the webhook and apiserver, for either auditing or debugging.
  string uid = 1 [(dev.f110.kubeproto.field) = { go_name: "UID", api_field_name: "uid", inline: false }];
  // Kind is the fully-qualified type of object being submitted (for example, v1.Pod or autoscaling.v1.Scale)
  .k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionKind kind = 2 [(dev.f110.kubeproto.field) = { go_name: "Kind", api_field_name: "kind", inline: false }];
  // Resource is the fully-qualified resource being requested (for example, v1.pods)
  .k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionResource resource = 3 [(dev.f110.kubeproto.field) = { go_name: "Resource", api_field_name: "resource", inline: false }];
  // SubResource is the subresource being requested, if any (for example, "status" or "scale")
  optional string sub_resource = 4 [(dev.f110.kubeproto.field) = { go_name: "SubResource", api_field_name: "subResource", inline: false }];
  // RequestKind is the fully-qualified type of the original API request (for example, v1.Pod or autoscaling.v1.Scale).
  // If this is specified and differs from the value in "kind", an equivalent match and conversion was performed.
  // For example, if deployments can be modified via apps/v1 and apps/v1beta1, and a webhook registered a rule of
  // `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]` and `matchPolicy: Equivalent`,
  // an API request to apps/v1beta1 deployments would be converted and sent to the webhook
  // with `kind: {group:"apps", version:"v1", kind:"Deployment"}` (matching the rule the webhook registered for),
  // and `requestKind: {group:"apps", version:"v1beta1", kind:"Deployment"}` (indicating the kind of the original API request).
  // See documentation for the "matchPolicy" field in the webhook configuration type for more details.
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionKind request_kind = 5 [(dev.f110.kubeproto.field) = { go_name: "RequestKind", api_field_name: "requestKind", inline: false }];
  // RequestResource is the fully-qualified resource of the original API request (for example, v1.pods).
  // If this is specified and differs from the value in "resource", an equivalent match and conversion was performed.
  // For example, if deployments can be modified via apps/v1 and apps/v1beta1, and a webhook registered a rule of
  // `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]` and `matchPolicy: Equivalent`,
  // an API request to apps/v1beta1 deployments would be converted and sent to the webhook
  // with `resource: {group:"apps", version:"v1", resource:"deployments"}` (matching the resource the webhook registered for),
  // and `requestResource: {group:"apps", version:"v1beta1", resource:"deployments"}` (indicating the resource of the original API request).
  // See documentation for the "matchPolicy" field in the webhook configuration type.
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.GroupVersionResource request_resource = 6 [(dev.f110.kubeproto.field) = { go_name: "RequestResource", api_field_name: "requestResource", inline: false }];
  // RequestSubResource is the name of the subresource of the original API request, if any (for example, "status" or "scale")
  // If this is specified and differs from the value in "subResource", an equivalent match and conversion was performed.
  // See documentation for the "matchPolicy" field in the webhook configuration type.
  optional string request_sub_resource = 7 [(dev.f110.kubeproto.field) = { go_name: "RequestSubResource", api_field_name: "requestSubResource", inline: false }];
  // Name is the name of the object as presented in the request.  On a CREATE operation, the client may omit name and
  // rely on the server to generate the name.  If that is the case, this field will contain an empty string.
  optional string name = 8 [(dev.f110.kubeproto.field) = { go_name: "Name", api_field_name: "name", inline: false }];
  // Namespace is the namespace associated with the request (if any).
  optional string namespace = 9 [(dev.f110.kubeproto.field) = { go_name: "Namespace", api_field_name: "namespace", inline: false }];
  // Operation is the operation being performed. This may be different than the operation
  // requested. e.g. a patch can result in either a CREATE or UPDATE Operation.
  Operation operation = 10 [(dev.f110.kubeproto.field) = { go_name: "Operation", api_field_name: "operation", inline: false }];
  // UserInfo is information about the requesting user
  .k8s.io.api.authentication.v1.UserInfo user_info = 11 [(dev.f110.kubeproto.field) = { go_name: "UserInfo", api_field_name: "userInfo", inline: false }];
  // Object is the object from the incoming request.
  optional .k8s.io.apimachinery.pkg.runtime.RawExtension object = 12 [(dev.f110.kubeproto.field) = { go_name: "Object", api_field_name: "object", inline: false }];
  // OldObject is the existing object. Only populated for DELETE and UPDATE requests.
  optional .k8s.io.apimachinery.pkg.runtime.RawExtension old_object = 13 [(dev.f110.kubeproto.field) = { go_name: "OldObject", api_field_name: "oldObject", inline: false }];
  // DryRun indicates that modifications will definitely not be persisted for this request.
  // Defaults to false.
  optional bool dry_run = 14 [(dev.f110.kubeproto.field) = { go_name: "DryRun", api_field_name: "dryRun", inline: false }];
  // Options is the operation option structure of the operation being performed.
  // e.g. `meta.k8s.io/v1.DeleteOptions` or `meta.k8s.io/v1.CreateOptions`. This may be
  // different than the options the caller provided. e.g. for a patch request the performed
  // Operation might be a CREATE, in which case the Options will a
  // `meta.k8s.io/v1.CreateOptions` even though the caller provided `meta.k8s.io/v1.PatchOptions`.
  optional .k8s.io.apimachinery.pkg.runtime.RawExtension options = 15 [(dev.f110.kubeproto.field) = { go_name: "Options", api_field_name: "options", inline: false }];
}

message AdmissionResponse {
  // UID is an identifier for the individual request/response.
  // This must be copied over from the corresponding AdmissionRequest.
  string uid = 1 [(dev.f110.kubeproto.field) = { go_name: "UID", api_field_name: "uid", inline: false }];
  // Allowed indicates whether or not the admission request was permitted.
  bool allowed = 2 [(dev.f110.kubeproto.field) = { go_name: "Allowed", api_field_name: "allowed", inline: false }];
  // Result contains extra details into why an admission request was denied.
  // This field IS NOT consulted in any way if "Allowed" is "true".
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.Status result = 3 [(dev.f110.kubeproto.field) = { go_name: "Result", api_field_name: "status", inline: false }];
  // The patch body. Currently we only support "JSONPatch" which implements RFC 6902.
  optional bytes patch = 4 [(dev.f110.kubeproto.field) = { go_name: "Patch", api_field_name: "patch", inline: false }];
  // The type of Patch. Currently we only allow "JSONPatch".
  optional PatchType patch_type = 5 [(dev.f110.kubeproto.field) = { go_name: "PatchType", api_field_name: "patchType", inline: false }];
  // AuditAnnotations is an unstructured key value map set by remote admission controller (e.g. error=image-blacklisted).
  // MutatingAdmissionWebhook and ValidatingAdmissionWebhook admission controller will prefix the keys with
  // admission webhook name (e.g. imagepolicy.example.com/error=image-blacklisted). AuditAnnotations will be provided by
  // the admission webhook to add additional context to the audit log for this request.
  map<string, string> audit_annotations = 6 [(dev.f110.kubeproto.field) = { go_name: "AuditAnnotations", api_field_name: "auditAnnotations", inline: false }];
  // warnings is a list of warning messages to return to the requesting API client.
  // Warning messages describe a problem the client making the API request should correct or be aware of.
  // Limit warnings to 120 characters if possible.
  // Warnings over 256 characters and large numbers of warnings may be truncated.
  repeated string warnings = 7 [(dev.f110.kubeproto.field) = { go_name: "Warnings", api_field_name: "warnings", inline: false }];
}

message AdmissionReview {
  .k8s.io.apimachinery.pkg.apis.meta.v1.TypeMeta type_meta = 1 [(dev.f110.kubeproto.field) = { go_name: "TypeMeta", inline: true }];
  // Request describes the attributes for the admission request.
  optional AdmissionRequest request = 2 [(dev.f110.kubeproto.field) = { go_name: "Request", api_field_name: "request", inline: false }];
  // Response describes the attributes for the admission response.
  optional AdmissionResponse response = 3 [(dev.f110.kubeproto.field) = { go_name: "Response", api_field_name: "response", inline: false }];
}
