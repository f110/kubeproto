// Generated by: gen-go-to-protobuf
syntax = "proto3";
package k8s.io.api.events.v1;
option  go_package              = "k8s.io/api/events/v1";
option (dev.f110.kubeproto.k8s) = {
  domain: "events.k8s.io",
  version: "v1",
};
option (dev.f110.kubeproto.kubeproto_go_package) = "go.f110.dev/kubeproto/go/apis/eventsv1";

import "kube.proto";
import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";

message Event {
  // eventTime is the time when this Event was first observed. It is required.
  .k8s.io.apimachinery.pkg.apis.meta.v1.MicroTime event_time = 3 [(dev.f110.kubeproto.field) = { go_name: "EventTime", api_field_name: "eventTime", inline: false }];
  // series is data about the Event series this event represents or nil if it's a singleton Event.
  optional EventSeries series = 4 [(dev.f110.kubeproto.field) = { go_name: "Series", api_field_name: "series", inline: false }];
  // reportingController is the name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`.
  // This field cannot be empty for new Events.
  optional string reporting_controller = 5 [(dev.f110.kubeproto.field) = { go_name: "ReportingController", api_field_name: "reportingController", inline: false }];
  // reportingInstance is the ID of the controller instance, e.g. `kubelet-xyzf`.
  // This field cannot be empty for new Events and it can have at most 128 characters.
  optional string reporting_instance = 6 [(dev.f110.kubeproto.field) = { go_name: "ReportingInstance", api_field_name: "reportingInstance", inline: false }];
  // action is what action was taken/failed regarding to the regarding object. It is machine-readable.
  // This field cannot be empty for new Events and it can have at most 128 characters.
  optional string action = 7 [(dev.f110.kubeproto.field) = { go_name: "Action", api_field_name: "action", inline: false }];
  // reason is why the action was taken. It is human-readable.
  // This field cannot be empty for new Events and it can have at most 128 characters.
  optional string reason = 8 [(dev.f110.kubeproto.field) = { go_name: "Reason", api_field_name: "reason", inline: false }];
  // regarding contains the object this Event is about. In most cases it's an Object reporting controller
  // implements, e.g. ReplicaSetController implements ReplicaSets and this event is emitted because
  // it acts on some changes in a ReplicaSet object.
  optional .k8s.io.api.core.v1.ObjectReference regarding = 9 [(dev.f110.kubeproto.field) = { go_name: "Regarding", api_field_name: "regarding", inline: false }];
  // related is the optional secondary object for more complex actions. E.g. when regarding object triggers
  // a creation or deletion of related object.
  optional .k8s.io.api.core.v1.ObjectReference related = 10 [(dev.f110.kubeproto.field) = { go_name: "Related", api_field_name: "related", inline: false }];
  // note is a human-readable description of the status of this operation.
  // Maximal length of the note is 1kB, but libraries should be prepared to
  // handle values up to 64kB.
  optional string note = 11 [(dev.f110.kubeproto.field) = { go_name: "Note", api_field_name: "note", inline: false }];
  // type is the type of this event (Normal, Warning), new types could be added in the future.
  // It is machine-readable.
  // This field cannot be empty for new Events.
  optional string type = 12 [(dev.f110.kubeproto.field) = { go_name: "Type", api_field_name: "type", inline: false }];
  // deprecatedSource is the deprecated field assuring backward compatibility with core.v1 Event type.
  optional .k8s.io.api.core.v1.EventSource deprecated_source = 13 [(dev.f110.kubeproto.field) = { go_name: "DeprecatedSource", api_field_name: "deprecatedSource", inline: false }];
  // deprecatedFirstTimestamp is the deprecated field assuring backward compatibility with core.v1 Event type.
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.Time deprecated_first_timestamp = 14 [(dev.f110.kubeproto.field) = { go_name: "DeprecatedFirstTimestamp", api_field_name: "deprecatedFirstTimestamp", inline: false }];
  // deprecatedLastTimestamp is the deprecated field assuring backward compatibility with core.v1 Event type.
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.Time deprecated_last_timestamp = 15 [(dev.f110.kubeproto.field) = { go_name: "DeprecatedLastTimestamp", api_field_name: "deprecatedLastTimestamp", inline: false }];
  // deprecatedCount is the deprecated field assuring backward compatibility with core.v1 Event type.
  optional int32 deprecated_count = 16 [(dev.f110.kubeproto.field) = { go_name: "DeprecatedCount", api_field_name: "deprecatedCount", inline: false }];

  option (dev.f110.kubeproto.kind) = {
  };
}

message EventList {
  .k8s.io.apimachinery.pkg.apis.meta.v1.TypeMeta type_meta = 1 [(dev.f110.kubeproto.field) = { go_name: "TypeMeta", inline: true }];
  // Standard list metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta list_meta = 2 [(dev.f110.kubeproto.field) = { go_name: "ListMeta", api_field_name: "metadata", inline: false }];
  // items is a list of schema objects.
  repeated Event items = 3 [(dev.f110.kubeproto.field) = { go_name: "Items", api_field_name: "items", inline: false }];
}

message EventSeries {
  // count is the number of occurrences in this series up to the last heartbeat time.
  int32 count = 1 [(dev.f110.kubeproto.field) = { go_name: "Count", api_field_name: "count", inline: false }];
  // lastObservedTime is the time when last Event from the series was seen before last heartbeat.
  .k8s.io.apimachinery.pkg.apis.meta.v1.MicroTime last_observed_time = 2 [(dev.f110.kubeproto.field) = { go_name: "LastObservedTime", api_field_name: "lastObservedTime", inline: false }];
}
