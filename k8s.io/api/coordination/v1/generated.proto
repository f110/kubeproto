// Generated by: gen-go-to-protobuf
syntax = "proto3";
package k8s.io.api.coordination.v1;
option  go_package              = "k8s.io/api/coordination/v1";
option (dev.f110.kubeproto.k8s) = {
  domain: "coordination.k8s.io",
  version: "v1",
};
option (dev.f110.kubeproto.kubeproto_go_package) = "go.f110.dev/kubeproto/go/apis/coordinationv1";

import "kube.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";

enum CoordinatedLeaseStrategy {
  COORDINATED_LEASE_STRATEGY_OLDEST_EMULATION_VERSION = 0;
}

message Lease {
  // spec contains the specification of the Lease.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  optional LeaseSpec spec = 3 [(dev.f110.kubeproto.field) = { go_name: "Spec", api_field_name: "spec", inline: false }];

  option (dev.f110.kubeproto.kind) = {
  };
}

message LeaseList {
  .k8s.io.apimachinery.pkg.apis.meta.v1.TypeMeta type_meta = 1 [(dev.f110.kubeproto.field) = { go_name: "TypeMeta", inline: true }];
  // Standard list metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta list_meta = 2 [(dev.f110.kubeproto.field) = { go_name: "ListMeta", api_field_name: "metadata", inline: false }];
  // items is a list of schema objects.
  repeated Lease items = 3 [(dev.f110.kubeproto.field) = { go_name: "Items", api_field_name: "items", inline: false }];
}

message LeaseSpec {
  // holderIdentity contains the identity of the holder of a current lease.
  // If Coordinated Leader Election is used, the holder identity must be
  // equal to the elected LeaseCandidate.metadata.name field.
  optional string holder_identity = 1 [(dev.f110.kubeproto.field) = { go_name: "HolderIdentity", api_field_name: "holderIdentity", inline: false }];
  // leaseDurationSeconds is a duration that candidates for a lease need
  // to wait to force acquire it. This is measured against the time of last
  // observed renewTime.
  optional int32 lease_duration_seconds = 2 [(dev.f110.kubeproto.field) = { go_name: "LeaseDurationSeconds", api_field_name: "leaseDurationSeconds", inline: false }];
  // acquireTime is a time when the current lease was acquired.
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.MicroTime acquire_time = 3 [(dev.f110.kubeproto.field) = { go_name: "AcquireTime", api_field_name: "acquireTime", inline: false }];
  // renewTime is a time when the current holder of a lease has last
  // updated the lease.
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.MicroTime renew_time = 4 [(dev.f110.kubeproto.field) = { go_name: "RenewTime", api_field_name: "renewTime", inline: false }];
  // leaseTransitions is the number of transitions of a lease between
  // holders.
  optional int32 lease_transitions = 5 [(dev.f110.kubeproto.field) = { go_name: "LeaseTransitions", api_field_name: "leaseTransitions", inline: false }];
  // Strategy indicates the strategy for picking the leader for coordinated leader election.
  // If the field is not specified, there is no active coordination for this lease.
  // (Alpha) Using this field requires the CoordinatedLeaderElection feature gate to be enabled.
  optional CoordinatedLeaseStrategy strategy = 6 [(dev.f110.kubeproto.field) = { go_name: "Strategy", api_field_name: "strategy", inline: false }];
  // PreferredHolder signals to a lease holder that the lease has a
  // more optimal holder and should be given up.
  // This field can only be set if Strategy is also set.
  optional string preferred_holder = 7 [(dev.f110.kubeproto.field) = { go_name: "PreferredHolder", api_field_name: "preferredHolder", inline: false }];
}
