// Generated by: gen-go-to-protobuf
syntax = "proto3";
package k8s.io.api.rbac.v1;
option  go_package              = "k8s.io/api/rbac/v1";
option (dev.f110.kubeproto.k8s) = {
  domain: "rbac.authorization.k8s.io",
  version: "v1",
};
option (dev.f110.kubeproto.kubeproto_go_package) = "go.f110.dev/kubeproto/go/apis/rbacv1";

import "kube.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";

message AggregationRule {
  // ClusterRoleSelectors holds a list of selectors which will be used to find ClusterRoles and create the rules.
  // If any of the selectors match, then the ClusterRole's permissions will be added
  repeated .k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector cluster_role_selectors = 1 [(dev.f110.kubeproto.field) = { go_name: "ClusterRoleSelectors", api_field_name: "clusterRoleSelectors", inline: false }];
}

message ClusterRole {
  // Rules holds all the PolicyRules for this ClusterRole
  repeated PolicyRule rules = 3 [(dev.f110.kubeproto.field) = { go_name: "Rules", api_field_name: "rules", inline: false }];
  // AggregationRule is an optional field that describes how to build the Rules for this ClusterRole.
  // If AggregationRule is set, then the Rules are controller managed and direct changes to Rules will be
  // stomped by the controller.
  optional AggregationRule aggregation_rule = 4 [(dev.f110.kubeproto.field) = { go_name: "AggregationRule", api_field_name: "aggregationRule", inline: false }];

  option (dev.f110.kubeproto.kind) = {
    scope: SCOPE_CLUSTER
  };
}

message ClusterRoleBinding {
  // Subjects holds references to the objects the role applies to.
  repeated Subject subjects = 3 [(dev.f110.kubeproto.field) = { go_name: "Subjects", api_field_name: "subjects", inline: false }];
  // RoleRef can only reference a ClusterRole in the global namespace.
  // If the RoleRef cannot be resolved, the Authorizer must return an error.
  // This field is immutable.
  RoleRef role_ref = 4 [(dev.f110.kubeproto.field) = { go_name: "RoleRef", api_field_name: "roleRef", inline: false }];

  option (dev.f110.kubeproto.kind) = {
    scope: SCOPE_CLUSTER
  };
}

message ClusterRoleBindingList {
  .k8s.io.apimachinery.pkg.apis.meta.v1.TypeMeta type_meta = 1 [(dev.f110.kubeproto.field) = { go_name: "TypeMeta", inline: true }];
  // Standard object's metadata.
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta list_meta = 2 [(dev.f110.kubeproto.field) = { go_name: "ListMeta", api_field_name: "metadata", inline: false }];
  // Items is a list of ClusterRoleBindings
  repeated ClusterRoleBinding items = 3 [(dev.f110.kubeproto.field) = { go_name: "Items", api_field_name: "items", inline: false }];
}

message ClusterRoleList {
  .k8s.io.apimachinery.pkg.apis.meta.v1.TypeMeta type_meta = 1 [(dev.f110.kubeproto.field) = { go_name: "TypeMeta", inline: true }];
  // Standard object's metadata.
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta list_meta = 2 [(dev.f110.kubeproto.field) = { go_name: "ListMeta", api_field_name: "metadata", inline: false }];
  // Items is a list of ClusterRoles
  repeated ClusterRole items = 3 [(dev.f110.kubeproto.field) = { go_name: "Items", api_field_name: "items", inline: false }];
}

message PolicyRule {
  // Verbs is a list of Verbs that apply to ALL the ResourceKinds contained in this rule. '*' represents all verbs.
  repeated string verbs = 1 [(dev.f110.kubeproto.field) = { go_name: "Verbs", api_field_name: "verbs", inline: false }];
  // APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of
  // the enumerated resources in any API group will be allowed. "" represents the core API group and "*" represents all API groups.
  repeated string api_groups = 2 [(dev.f110.kubeproto.field) = { go_name: "APIGroups", api_field_name: "apiGroups", inline: false }];
  // Resources is a list of resources this rule applies to. '*' represents all resources.
  repeated string resources = 3 [(dev.f110.kubeproto.field) = { go_name: "Resources", api_field_name: "resources", inline: false }];
  // ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.
  repeated string resource_names = 4 [(dev.f110.kubeproto.field) = { go_name: "ResourceNames", api_field_name: "resourceNames", inline: false }];
  // NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path
  // Since non-resource URLs are not namespaced, this field is only applicable for ClusterRoles referenced from a ClusterRoleBinding.
  // Rules can either apply to API resources (such as "pods" or "secrets") or non-resource URL paths (such as "/api"),  but not both.
  repeated string non_resource_url_s = 5 [(dev.f110.kubeproto.field) = { go_name: "NonResourceURLs", api_field_name: "nonResourceURLs", inline: false }];
}

message Role {
  // Rules holds all the PolicyRules for this Role
  repeated PolicyRule rules = 3 [(dev.f110.kubeproto.field) = { go_name: "Rules", api_field_name: "rules", inline: false }];

  option (dev.f110.kubeproto.kind) = {
  };
}

message RoleBinding {
  // Subjects holds references to the objects the role applies to.
  repeated Subject subjects = 3 [(dev.f110.kubeproto.field) = { go_name: "Subjects", api_field_name: "subjects", inline: false }];
  // RoleRef can reference a Role in the current namespace or a ClusterRole in the global namespace.
  // If the RoleRef cannot be resolved, the Authorizer must return an error.
  // This field is immutable.
  RoleRef role_ref = 4 [(dev.f110.kubeproto.field) = { go_name: "RoleRef", api_field_name: "roleRef", inline: false }];

  option (dev.f110.kubeproto.kind) = {
  };
}

message RoleBindingList {
  .k8s.io.apimachinery.pkg.apis.meta.v1.TypeMeta type_meta = 1 [(dev.f110.kubeproto.field) = { go_name: "TypeMeta", inline: true }];
  // Standard object's metadata.
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta list_meta = 2 [(dev.f110.kubeproto.field) = { go_name: "ListMeta", api_field_name: "metadata", inline: false }];
  // Items is a list of RoleBindings
  repeated RoleBinding items = 3 [(dev.f110.kubeproto.field) = { go_name: "Items", api_field_name: "items", inline: false }];
}

message RoleList {
  .k8s.io.apimachinery.pkg.apis.meta.v1.TypeMeta type_meta = 1 [(dev.f110.kubeproto.field) = { go_name: "TypeMeta", inline: true }];
  // Standard object's metadata.
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta list_meta = 2 [(dev.f110.kubeproto.field) = { go_name: "ListMeta", api_field_name: "metadata", inline: false }];
  // Items is a list of Roles
  repeated Role items = 3 [(dev.f110.kubeproto.field) = { go_name: "Items", api_field_name: "items", inline: false }];
}

message RoleRef {
  // APIGroup is the group for the resource being referenced
  string api_group = 1 [(dev.f110.kubeproto.field) = { go_name: "APIGroup", api_field_name: "apiGroup", inline: false }];
  // Kind is the type of resource being referenced
  string kind = 2 [(dev.f110.kubeproto.field) = { go_name: "Kind", api_field_name: "kind", inline: false }];
  // Name is the name of resource being referenced
  string name = 3 [(dev.f110.kubeproto.field) = { go_name: "Name", api_field_name: "name", inline: false }];
}

message Subject {
  // Kind of object being referenced. Values defined by this API group are "User", "Group", and "ServiceAccount".
  // If the Authorizer does not recognized the kind value, the Authorizer should report an error.
  string kind = 1 [(dev.f110.kubeproto.field) = { go_name: "Kind", api_field_name: "kind", inline: false }];
  // APIGroup holds the API group of the referenced subject.
  // Defaults to "" for ServiceAccount subjects.
  // Defaults to "rbac.authorization.k8s.io" for User and Group subjects.
  optional string api_group = 2 [(dev.f110.kubeproto.field) = { go_name: "APIGroup", api_field_name: "apiGroup", inline: false }];
  // Name of the object being referenced.
  string name = 3 [(dev.f110.kubeproto.field) = { go_name: "Name", api_field_name: "name", inline: false }];
  // Namespace of the referenced object.  If the object kind is non-namespace, such as "User" or "Group", and this value is not empty
  // the Authorizer should report an error.
  optional string namespace = 4 [(dev.f110.kubeproto.field) = { go_name: "Namespace", api_field_name: "namespace", inline: false }];
}
