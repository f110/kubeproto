// Generated by: gen-go-to-protobuf
syntax = "proto3";
package k8s.io.api.authentication.v1;
option  go_package              = "k8s.io/api/authentication/v1";
option (dev.f110.kubeproto.k8s) = {
  domain: "authentication.k8s.io",
  version: "v1",
};
option (dev.f110.kubeproto.kubeproto_go_package) = "go.f110.dev/kubeproto/go/apis/authenticationv1";

import "kube.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";

message BoundObjectReference {
  // Kind of the referent. Valid kinds are 'Pod' and 'Secret'.
  optional string kind = 1 [(dev.f110.kubeproto.field) = { go_name: "Kind", api_field_name: "kind", inline: false }];
  // API version of the referent.
  optional string api_version = 2 [(dev.f110.kubeproto.field) = { go_name: "APIVersion", api_field_name: "apiVersion", inline: false }];
  // Name of the referent.
  optional string name = 3 [(dev.f110.kubeproto.field) = { go_name: "Name", api_field_name: "name", inline: false }];
  // UID of the referent.
  optional string uid = 4 [(dev.f110.kubeproto.field) = { go_name: "UID", api_field_name: "uid", inline: false }];
}

message ExtraValue {
  repeated string items = 1 [(dev.f110.kubeproto.field) = { go_name: "", inline: false }];
}

message SelfSubjectReview {
  // Status is filled in by the server with the user attributes.
  optional SelfSubjectReviewStatus status = 3 [(dev.f110.kubeproto.field) = { go_name: "Status", api_field_name: "status", sub_resource: true, inline: false }];

  option (dev.f110.kubeproto.kind) = {
    scope: SCOPE_CLUSTER
  };
}

message SelfSubjectReviewStatus {
  // User attributes of the user making this request.
  optional UserInfo user_info = 1 [(dev.f110.kubeproto.field) = { go_name: "UserInfo", api_field_name: "userInfo", inline: false }];
}

message TokenRequest {
  // Spec holds information about the request being evaluated
  TokenRequestSpec spec = 3 [(dev.f110.kubeproto.field) = { go_name: "Spec", api_field_name: "spec", inline: false }];
  // Status is filled in by the server and indicates whether the token can be authenticated.
  optional TokenRequestStatus status = 4 [(dev.f110.kubeproto.field) = { go_name: "Status", api_field_name: "status", sub_resource: true, inline: false }];

  option (dev.f110.kubeproto.kind) = {
  };
}

message TokenRequestSpec {
  // Audiences are the intendend audiences of the token. A recipient of a
  // token must identify themself with an identifier in the list of
  // audiences of the token, and otherwise should reject the token. A
  // token issued for multiple audiences may be used to authenticate
  // against any of the audiences listed but implies a high degree of
  // trust between the target audiences.
  repeated string audiences = 1 [(dev.f110.kubeproto.field) = { go_name: "Audiences", api_field_name: "audiences", inline: false }];
  // ExpirationSeconds is the requested duration of validity of the request. The
  // token issuer may return a token with a different validity duration so a
  // client needs to check the 'expiration' field in a response.
  optional int64 expiration_seconds = 2 [(dev.f110.kubeproto.field) = { go_name: "ExpirationSeconds", api_field_name: "expirationSeconds", inline: false }];
  // BoundObjectRef is a reference to an object that the token will be bound to.
  // The token will only be valid for as long as the bound object exists.
  // NOTE: The API server's TokenReview endpoint will validate the
  // BoundObjectRef, but other audiences may not. Keep ExpirationSeconds
  // small if you want prompt revocation.
  optional BoundObjectReference bound_object_ref = 3 [(dev.f110.kubeproto.field) = { go_name: "BoundObjectRef", api_field_name: "boundObjectRef", inline: false }];
}

message TokenRequestStatus {
  // Token is the opaque bearer token.
  string token = 1 [(dev.f110.kubeproto.field) = { go_name: "Token", api_field_name: "token", inline: false }];
  // ExpirationTimestamp is the time of expiration of the returned token.
  .k8s.io.apimachinery.pkg.apis.meta.v1.Time expiration_timestamp = 2 [(dev.f110.kubeproto.field) = { go_name: "ExpirationTimestamp", api_field_name: "expirationTimestamp", inline: false }];
}

message TokenReview {
  // Spec holds information about the request being evaluated
  TokenReviewSpec spec = 3 [(dev.f110.kubeproto.field) = { go_name: "Spec", api_field_name: "spec", inline: false }];
  // Status is filled in by the server and indicates whether the request can be authenticated.
  optional TokenReviewStatus status = 4 [(dev.f110.kubeproto.field) = { go_name: "Status", api_field_name: "status", sub_resource: true, inline: false }];

  option (dev.f110.kubeproto.kind) = {
    scope: SCOPE_CLUSTER
  };
}

message TokenReviewSpec {
  // Token is the opaque bearer token.
  optional string token = 1 [(dev.f110.kubeproto.field) = { go_name: "Token", api_field_name: "token", inline: false }];
  // Audiences is a list of the identifiers that the resource server presented
  // with the token identifies as. Audience-aware token authenticators will
  // verify that the token was intended for at least one of the audiences in
  // this list. If no audiences are provided, the audience will default to the
  // audience of the Kubernetes apiserver.
  repeated string audiences = 2 [(dev.f110.kubeproto.field) = { go_name: "Audiences", api_field_name: "audiences", inline: false }];
}

message TokenReviewStatus {
  // Authenticated indicates that the token was associated with a known user.
  optional bool authenticated = 1 [(dev.f110.kubeproto.field) = { go_name: "Authenticated", api_field_name: "authenticated", inline: false }];
  // User is the UserInfo associated with the provided token.
  optional UserInfo user = 2 [(dev.f110.kubeproto.field) = { go_name: "User", api_field_name: "user", inline: false }];
  // Audiences are audience identifiers chosen by the authenticator that are
  // compatible with both the TokenReview and token. An identifier is any
  // identifier in the intersection of the TokenReviewSpec audiences and the
  // token's audiences. A client of the TokenReview API that sets the
  // spec.audiences field should validate that a compatible audience identifier
  // is returned in the status.audiences field to ensure that the TokenReview
  // server is audience aware. If a TokenReview returns an empty
  // status.audience field where status.authenticated is "true", the token is
  // valid against the audience of the Kubernetes API server.
  repeated string audiences = 3 [(dev.f110.kubeproto.field) = { go_name: "Audiences", api_field_name: "audiences", inline: false }];
  // Error indicates that the token couldn't be checked
  optional string error = 4 [(dev.f110.kubeproto.field) = { go_name: "Error", api_field_name: "error", inline: false }];
}

message UserInfo {
  // The name that uniquely identifies this user among all active users.
  optional string username = 1 [(dev.f110.kubeproto.field) = { go_name: "Username", api_field_name: "username", inline: false }];
  // A unique value that identifies this user across time. If this user is
  // deleted and another user by the same name is added, they will have
  // different UIDs.
  optional string uid = 2 [(dev.f110.kubeproto.field) = { go_name: "UID", api_field_name: "uid", inline: false }];
  // The names of groups this user is a part of.
  repeated string groups = 3 [(dev.f110.kubeproto.field) = { go_name: "Groups", api_field_name: "groups", inline: false }];
  // Any additional information provided by the authenticator.
  map<string, ExtraValue> extra = 4 [(dev.f110.kubeproto.field) = { go_name: "Extra", api_field_name: "extra", inline: false }];
}
