// Generated by: gen-go-to-protobuf
syntax = "proto3";
package k8s.io.apimachinery.pkg.apis.meta.v1;
option  go_package                               = "k8s.io/apimachinery/pkg/apis/meta/v1";
option (dev.f110.kubeproto.kubeproto_go_package) = "go.f110.dev/kubeproto/go/apis/metav1";

import "kube.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";

enum CauseType {
  CAUSE_TYPE_FIELD_VALUE_NOT_FOUND      = 0;
  CAUSE_TYPE_FIELD_VALUE_REQUIRED       = 1;
  CAUSE_TYPE_FIELD_VALUE_DUPLICATE      = 2;
  CAUSE_TYPE_FIELD_VALUE_INVALID        = 3;
  CAUSE_TYPE_FIELD_VALUE_NOT_SUPPORTED  = 4;
  CAUSE_TYPE_UNEXPECTED_SERVER_RESPONSE = 5;
  CAUSE_TYPE_FIELD_MANAGER_CONFLICT     = 6;
  CAUSE_TYPE_RESOURCE_VERSION_TOO_LARGE = 7;
}

enum ConditionStatus {
  CONDITION_STATUS_TRUE    = 0 [(dev.f110.kubeproto.value) = { value: "True" }];
  CONDITION_STATUS_FALSE   = 1 [(dev.f110.kubeproto.value) = { value: "False" }];
  CONDITION_STATUS_UNKNOWN = 2 [(dev.f110.kubeproto.value) = { value: "Unknown" }];
}

enum DeletionPropagation {
  DELETION_PROPAGATION_ORPHAN     = 0 [(dev.f110.kubeproto.value) = { value: "Orphan" }];
  DELETION_PROPAGATION_BACKGROUND = 1 [(dev.f110.kubeproto.value) = { value: "Background" }];
  DELETION_PROPAGATION_FOREGROUND = 2 [(dev.f110.kubeproto.value) = { value: "Foreground" }];
}

enum IncludeObjectPolicy {
  INCLUDE_OBJECT_POLICY_NONE     = 0 [(dev.f110.kubeproto.value) = { value: "None" }];
  INCLUDE_OBJECT_POLICY_METADATA = 1 [(dev.f110.kubeproto.value) = { value: "Metadata" }];
  INCLUDE_OBJECT_POLICY_OBJECT   = 2 [(dev.f110.kubeproto.value) = { value: "Object" }];
}

enum LabelSelectorOperator {
  LABEL_SELECTOR_OPERATOR_IN             = 0 [(dev.f110.kubeproto.value) = { value: "In" }];
  LABEL_SELECTOR_OPERATOR_NOT_IN         = 1;
  LABEL_SELECTOR_OPERATOR_EXISTS         = 2 [(dev.f110.kubeproto.value) = { value: "Exists" }];
  LABEL_SELECTOR_OPERATOR_DOES_NOT_EXIST = 3;
}

enum ManagedFieldsOperationType {
  MANAGED_FIELDS_OPERATION_TYPE_APPLY  = 0 [(dev.f110.kubeproto.value) = { value: "Apply" }];
  MANAGED_FIELDS_OPERATION_TYPE_UPDATE = 1 [(dev.f110.kubeproto.value) = { value: "Update" }];
}

enum ResourceVersionMatch {
  RESOURCE_VERSION_MATCH_NOT_OLDER_THAN = 0;
  RESOURCE_VERSION_MATCH_EXACT          = 1 [(dev.f110.kubeproto.value) = { value: "Exact" }];
}

enum RowConditionType {
  ROW_CONDITION_TYPE_COMPLETED = 0 [(dev.f110.kubeproto.value) = { value: "Completed" }];
}

enum StatusReason {
  STATUS_REASON_UNKNOWN                  = 0 [(dev.f110.kubeproto.value) = { value: "" }];
  STATUS_REASON_UNAUTHORIZED             = 1 [(dev.f110.kubeproto.value) = { value: "Unauthorized" }];
  STATUS_REASON_FORBIDDEN                = 2 [(dev.f110.kubeproto.value) = { value: "Forbidden" }];
  STATUS_REASON_NOT_FOUND                = 3;
  STATUS_REASON_ALREADY_EXISTS           = 4;
  STATUS_REASON_CONFLICT                 = 5 [(dev.f110.kubeproto.value) = { value: "Conflict" }];
  STATUS_REASON_GONE                     = 6 [(dev.f110.kubeproto.value) = { value: "Gone" }];
  STATUS_REASON_INVALID                  = 7 [(dev.f110.kubeproto.value) = { value: "Invalid" }];
  STATUS_REASON_SERVER_TIMEOUT           = 8;
  STATUS_REASON_TIMEOUT                  = 9 [(dev.f110.kubeproto.value) = { value: "Timeout" }];
  STATUS_REASON_TOO_MANY_REQUESTS        = 10;
  STATUS_REASON_BAD_REQUEST              = 11;
  STATUS_REASON_METHOD_NOT_ALLOWED       = 12;
  STATUS_REASON_NOT_ACCEPTABLE           = 13;
  STATUS_REASON_REQUEST_ENTITY_TOO_LARGE = 14;
  STATUS_REASON_UNSUPPORTED_MEDIA_TYPE   = 15;
  STATUS_REASON_INTERNAL_ERROR           = 16;
  STATUS_REASON_EXPIRED                  = 17 [(dev.f110.kubeproto.value) = { value: "Expired" }];
  STATUS_REASON_SERVICE_UNAVAILABLE      = 18;
}

message APIGroup {
  TypeMeta type_meta = 1 [(dev.f110.kubeproto.field) = { go_name: "TypeMeta", inline: true }];
  // name is the name of the group.
  string name = 2 [(dev.f110.kubeproto.field) = { go_name: "Name", api_field_name: "name", inline: false }];
  // versions are the versions supported in this group.
  repeated GroupVersionForDiscovery versions = 3 [(dev.f110.kubeproto.field) = { go_name: "Versions", api_field_name: "versions", inline: false }];
  // preferredVersion is the version preferred by the API server, which
  // probably is the storage version.
  optional GroupVersionForDiscovery preferred_version = 4 [(dev.f110.kubeproto.field) = { go_name: "PreferredVersion", api_field_name: "preferredVersion", inline: false }];
  // a map of client CIDR to server address that is serving this group.
  // This is to help clients reach servers in the most network-efficient way possible.
  // Clients can use the appropriate server address as per the CIDR that they match.
  // In case of multiple matches, clients should use the longest matching CIDR.
  // The server returns only those CIDRs that it thinks that the client can match.
  // For example: the master will return an internal IP CIDR only, if the client reaches the server using an internal IP.
  // Server looks at X-Forwarded-For header or X-Real-Ip header or request.RemoteAddr (in that order) to get the client IP.
  repeated ServerAddressByClientCIDR server_address_by_client_cidrs = 5 [(dev.f110.kubeproto.field) = { go_name: "ServerAddressByClientCIDRs", api_field_name: "serverAddressByClientCIDRs", inline: false }];
}

message APIGroupList {
  TypeMeta type_meta = 1 [(dev.f110.kubeproto.field) = { go_name: "TypeMeta", inline: true }];
  // groups is a list of APIGroup.
  repeated APIGroup groups = 2 [(dev.f110.kubeproto.field) = { go_name: "Groups", api_field_name: "groups", inline: false }];
}

message APIResource {
  // name is the plural name of the resource.
  string name = 1 [(dev.f110.kubeproto.field) = { go_name: "Name", api_field_name: "name", inline: false }];
  // singularName is the singular name of the resource.  This allows clients to handle plural and singular opaquely.
  // The singularName is more correct for reporting status on a single item and both singular and plural are allowed
  // from the kubectl CLI interface.
  string singular_name = 2 [(dev.f110.kubeproto.field) = { go_name: "SingularName", api_field_name: "singularName", inline: false }];
  // namespaced indicates if a resource is namespaced or not.
  bool namespaced = 3 [(dev.f110.kubeproto.field) = { go_name: "Namespaced", api_field_name: "namespaced", inline: false }];
  // group is the preferred group of the resource.  Empty implies the group of the containing resource list.
  // For subresources, this may have a different value, for example: Scale".
  optional string group = 4 [(dev.f110.kubeproto.field) = { go_name: "Group", api_field_name: "group", inline: false }];
  // version is the preferred version of the resource.  Empty implies the version of the containing resource list
  // For subresources, this may have a different value, for example: v1 (while inside a v1beta1 version of the core resource's group)".
  optional string version = 5 [(dev.f110.kubeproto.field) = { go_name: "Version", api_field_name: "version", inline: false }];
  // kind is the kind for the resource (e.g. 'Foo' is the kind for a resource 'foo')
  string kind = 6 [(dev.f110.kubeproto.field) = { go_name: "Kind", api_field_name: "kind", inline: false }];
  // verbs is a list of supported kube verbs (this includes get, list, watch, create,
  // update, patch, delete, deletecollection, and proxy)
  Verbs verbs = 7 [(dev.f110.kubeproto.field) = { go_name: "Verbs", api_field_name: "verbs", inline: false }];
  // shortNames is a list of suggested short names of the resource.
  repeated string short_names = 8 [(dev.f110.kubeproto.field) = { go_name: "ShortNames", api_field_name: "shortNames", inline: false }];
  // categories is a list of the grouped resources this resource belongs to (e.g. 'all')
  repeated string categories = 9 [(dev.f110.kubeproto.field) = { go_name: "Categories", api_field_name: "categories", inline: false }];
  // The hash value of the storage version, the version this resource is
  // converted to when written to the data store. Value must be treated
  // as opaque by clients. Only equality comparison on the value is valid.
  // This is an alpha feature and may change or be removed in the future.
  // The field is populated by the apiserver only if the
  // StorageVersionHash feature gate is enabled.
  // This field will remain optional even if it graduates.
  optional string storage_version_hash = 10 [(dev.f110.kubeproto.field) = { go_name: "StorageVersionHash", api_field_name: "storageVersionHash", inline: false }];
}

message APIResourceList {
  TypeMeta type_meta = 1 [(dev.f110.kubeproto.field) = { go_name: "TypeMeta", inline: true }];
  // groupVersion is the group and version this APIResourceList is for.
  string group_version = 2 [(dev.f110.kubeproto.field) = { go_name: "GroupVersion", api_field_name: "groupVersion", inline: false }];
  // resources contains the name of the resources and if they are namespaced.
  repeated APIResource api_resources = 3 [(dev.f110.kubeproto.field) = { go_name: "APIResources", api_field_name: "resources", inline: false }];
}

message APIVersions {
  TypeMeta type_meta = 1 [(dev.f110.kubeproto.field) = { go_name: "TypeMeta", inline: true }];
  // versions are the api versions that are available.
  repeated string versions = 2 [(dev.f110.kubeproto.field) = { go_name: "Versions", api_field_name: "versions", inline: false }];
  // a map of client CIDR to server address that is serving this group.
  // This is to help clients reach servers in the most network-efficient way possible.
  // Clients can use the appropriate server address as per the CIDR that they match.
  // In case of multiple matches, clients should use the longest matching CIDR.
  // The server returns only those CIDRs that it thinks that the client can match.
  // For example: the master will return an internal IP CIDR only, if the client reaches the server using an internal IP.
  // Server looks at X-Forwarded-For header or X-Real-Ip header or request.RemoteAddr (in that order) to get the client IP.
  repeated ServerAddressByClientCIDR server_address_by_client_cidrs = 3 [(dev.f110.kubeproto.field) = { go_name: "ServerAddressByClientCIDRs", api_field_name: "serverAddressByClientCIDRs", inline: false }];
}

message ApplyOptions {
  TypeMeta type_meta = 1 [(dev.f110.kubeproto.field) = { go_name: "TypeMeta", inline: true }];
  // When present, indicates that modifications should not be
  // persisted. An invalid or unrecognized dryRun directive will
  // result in an error response and no further processing of the
  // request. Valid values are:
  // - All: all dry run stages will be processed
  repeated string dry_run = 2 [(dev.f110.kubeproto.field) = { go_name: "DryRun", api_field_name: "dryRun", inline: false }];
  // Force is going to "force" Apply requests. It means user will
  // re-acquire conflicting fields owned by other people.
  bool force = 3 [(dev.f110.kubeproto.field) = { go_name: "Force", api_field_name: "force", inline: false }];
  // fieldManager is a name associated with the actor or entity
  // that is making these changes. The value must be less than or
  // 128 characters long, and only contain printable characters,
  // as defined by https://golang.org/pkg/unicode/#IsPrint. This
  // field is required.
  string field_manager = 4 [(dev.f110.kubeproto.field) = { go_name: "FieldManager", api_field_name: "fieldManager", inline: false }];
}

message Condition {
  // type of condition in CamelCase or in foo.example.com/CamelCase.
  // ---
  // Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be
  // useful (see .node.status.conditions), the ability to deconflict is important.
  // The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
  string type = 1 [(dev.f110.kubeproto.field) = { go_name: "Type", api_field_name: "type", inline: false }];
  // status of the condition, one of True, False, Unknown.
  ConditionStatus status = 2 [(dev.f110.kubeproto.field) = { go_name: "Status", api_field_name: "status", inline: false }];
  // observedGeneration represents the .metadata.generation that the condition was set based upon.
  // For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
  // with respect to the current state of the instance.
  optional int64 observed_generation = 3 [(dev.f110.kubeproto.field) = { go_name: "ObservedGeneration", api_field_name: "observedGeneration", inline: false }];
  // lastTransitionTime is the last time the condition transitioned from one status to another.
  // This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
  Time last_transition_time = 4 [(dev.f110.kubeproto.field) = { go_name: "LastTransitionTime", api_field_name: "lastTransitionTime", inline: false }];
  // reason contains a programmatic identifier indicating the reason for the condition's last transition.
  // Producers of specific condition types may define expected values and meanings for this field,
  // and whether the values are considered a guaranteed API.
  // The value should be a CamelCase string.
  // This field may not be empty.
  string reason = 5 [(dev.f110.kubeproto.field) = { go_name: "Reason", api_field_name: "reason", inline: false }];
  // message is a human readable message indicating details about the transition.
  // This may be an empty string.
  string message = 6 [(dev.f110.kubeproto.field) = { go_name: "Message", api_field_name: "message", inline: false }];
}

message CreateOptions {
  TypeMeta type_meta = 1 [(dev.f110.kubeproto.field) = { go_name: "TypeMeta", inline: true }];
  // When present, indicates that modifications should not be
  // persisted. An invalid or unrecognized dryRun directive will
  // result in an error response and no further processing of the
  // request. Valid values are:
  // - All: all dry run stages will be processed
  repeated string dry_run = 2 [(dev.f110.kubeproto.field) = { go_name: "DryRun", api_field_name: "dryRun", inline: false }];
  // fieldManager is a name associated with the actor or entity
  // that is making these changes. The value must be less than or
  // 128 characters long, and only contain printable characters,
  // as defined by https://golang.org/pkg/unicode/#IsPrint.
  optional string field_manager = 3 [(dev.f110.kubeproto.field) = { go_name: "FieldManager", api_field_name: "fieldManager", inline: false }];
  // fieldValidation instructs the server on how to handle
  // objects in the request (POST/PUT/PATCH) containing unknown
  // or duplicate fields, provided that the `ServerSideFieldValidation`
  // feature gate is also enabled. Valid values are:
  // - Ignore: This will ignore any unknown fields that are silently
  // dropped from the object, and will ignore all but the last duplicate
  // field that the decoder encounters. This is the default behavior
  // prior to v1.23 and is the default behavior when the
  // `ServerSideFieldValidation` feature gate is disabled.
  // - Warn: This will send a warning via the standard warning response
  // header for each unknown field that is dropped from the object, and
  // for each duplicate field that is encountered. The request will
  // still succeed if there are no other errors, and will only persist
  // the last of any duplicate fields. This is the default when the
  // `ServerSideFieldValidation` feature gate is enabled.
  // - Strict: This will fail the request with a BadRequest error if
  // any unknown fields would be dropped from the object, or if any
  // duplicate fields are present. The error returned from the server
  // will contain all unknown and duplicate fields encountered.
  optional string field_validation = 4 [(dev.f110.kubeproto.field) = { go_name: "FieldValidation", api_field_name: "fieldValidation", inline: false }];
}

message DeleteOptions {
  TypeMeta type_meta = 1 [(dev.f110.kubeproto.field) = { go_name: "TypeMeta", inline: true }];
  // The duration in seconds before the object should be deleted. Value must be non-negative integer.
  // The value zero indicates delete immediately. If this value is nil, the default grace period for the
  // specified type will be used.
  // Defaults to a per object value if not specified. zero means delete immediately.
  optional int64 grace_period_seconds = 2 [(dev.f110.kubeproto.field) = { go_name: "GracePeriodSeconds", api_field_name: "gracePeriodSeconds", inline: false }];
  // Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be
  // returned.
  optional Preconditions preconditions = 3 [(dev.f110.kubeproto.field) = { go_name: "Preconditions", api_field_name: "preconditions", inline: false }];
  // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7.
  // Should the dependent objects be orphaned. If true/false, the "orphan"
  // finalizer will be added to/removed from the object's finalizers list.
  // Either this field or PropagationPolicy may be set, but not both.
  optional bool orphan_dependents = 4 [(dev.f110.kubeproto.field) = { go_name: "OrphanDependents", api_field_name: "orphanDependents", inline: false }];
  // Whether and how garbage collection will be performed.
  // Either this field or OrphanDependents may be set, but not both.
  // The default policy is decided by the existing finalizer set in the
  // metadata.finalizers and the resource-specific default policy.
  // Acceptable values are: 'Orphan' - orphan the dependents; 'Background' -
  // allow the garbage collector to delete the dependents in the background;
  // 'Foreground' - a cascading policy that deletes all dependents in the
  // foreground.
  optional DeletionPropagation propagation_policy = 5 [(dev.f110.kubeproto.field) = { go_name: "PropagationPolicy", api_field_name: "propagationPolicy", inline: false }];
  // When present, indicates that modifications should not be
  // persisted. An invalid or unrecognized dryRun directive will
  // result in an error response and no further processing of the
  // request. Valid values are:
  // - All: all dry run stages will be processed
  repeated string dry_run = 6 [(dev.f110.kubeproto.field) = { go_name: "DryRun", api_field_name: "dryRun", inline: false }];
}

message Duration {
  int64 duration = 1 [(dev.f110.kubeproto.field) = { go_name: "Duration", inline: false }];
}

message FieldsV1 {
  // Raw is the underlying serialization of this object.
  optional bytes raw = 1 [(dev.f110.kubeproto.field) = { go_name: "Raw", api_field_name: "-", inline: false }];
}

message GetOptions {
  TypeMeta type_meta = 1 [(dev.f110.kubeproto.field) = { go_name: "TypeMeta", inline: true }];
  // resourceVersion sets a constraint on what resource versions a request may be served from.
  // See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for
  // details.
  // Defaults to unset
  optional string resource_version = 2 [(dev.f110.kubeproto.field) = { go_name: "ResourceVersion", api_field_name: "resourceVersion", inline: false }];
}

message GroupKind {
  string group = 1 [(dev.f110.kubeproto.field) = { go_name: "Group", api_field_name: "group", inline: false }];
  string kind  = 2 [(dev.f110.kubeproto.field) = { go_name: "Kind", api_field_name: "kind", inline: false }];
}

message GroupResource {
  string group    = 1 [(dev.f110.kubeproto.field) = { go_name: "Group", api_field_name: "group", inline: false }];
  string resource = 2 [(dev.f110.kubeproto.field) = { go_name: "Resource", api_field_name: "resource", inline: false }];
}

message GroupVersion {
  string group   = 1 [(dev.f110.kubeproto.field) = { go_name: "Group", api_field_name: "group", inline: false }];
  string version = 2 [(dev.f110.kubeproto.field) = { go_name: "Version", api_field_name: "version", inline: false }];
}

message GroupVersionForDiscovery {
  // groupVersion specifies the API group and version in the form "group/version"
  string group_version = 1 [(dev.f110.kubeproto.field) = { go_name: "GroupVersion", api_field_name: "groupVersion", inline: false }];
  // version specifies the version in the form of "version". This is to save
  // the clients the trouble of splitting the GroupVersion.
  string version = 2 [(dev.f110.kubeproto.field) = { go_name: "Version", api_field_name: "version", inline: false }];
}

message GroupVersionKind {
  string group   = 1 [(dev.f110.kubeproto.field) = { go_name: "Group", api_field_name: "group", inline: false }];
  string version = 2 [(dev.f110.kubeproto.field) = { go_name: "Version", api_field_name: "version", inline: false }];
  string kind    = 3 [(dev.f110.kubeproto.field) = { go_name: "Kind", api_field_name: "kind", inline: false }];
}

message GroupVersionResource {
  string group    = 1 [(dev.f110.kubeproto.field) = { go_name: "Group", api_field_name: "group", inline: false }];
  string version  = 2 [(dev.f110.kubeproto.field) = { go_name: "Version", api_field_name: "version", inline: false }];
  string resource = 3 [(dev.f110.kubeproto.field) = { go_name: "Resource", api_field_name: "resource", inline: false }];
}

message LabelSelector {
  // matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
  // map is equivalent to an element of matchExpressions, whose key field is "key", the
  // operator is "In", and the values array contains only "value". The requirements are ANDed.
  map<string, string> match_labels = 1 [(dev.f110.kubeproto.field) = { go_name: "MatchLabels", api_field_name: "matchLabels", inline: false }];
  // matchExpressions is a list of label selector requirements. The requirements are ANDed.
  repeated LabelSelectorRequirement match_expressions = 2 [(dev.f110.kubeproto.field) = { go_name: "MatchExpressions", api_field_name: "matchExpressions", inline: false }];
}

message LabelSelectorRequirement {
  // key is the label key that the selector applies to.
  string key = 1 [(dev.f110.kubeproto.field) = { go_name: "Key", api_field_name: "key", inline: false }];
  // operator represents a key's relationship to a set of values.
  // Valid operators are In, NotIn, Exists and DoesNotExist.
  LabelSelectorOperator operator = 2 [(dev.f110.kubeproto.field) = { go_name: "Operator", api_field_name: "operator", inline: false }];
  // values is an array of string values. If the operator is In or NotIn,
  // the values array must be non-empty. If the operator is Exists or DoesNotExist,
  // the values array must be empty. This array is replaced during a strategic
  // merge patch.
  repeated string values = 3 [(dev.f110.kubeproto.field) = { go_name: "Values", api_field_name: "values", inline: false }];
}

message List {
  TypeMeta type_meta = 1 [(dev.f110.kubeproto.field) = { go_name: "TypeMeta", inline: true }];
  // Standard list metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  optional ListMeta list_meta = 2 [(dev.f110.kubeproto.field) = { go_name: "ListMeta", api_field_name: "metadata", inline: false }];
  // List of objects
  repeated .k8s.io.apimachinery.pkg.runtime.RawExtension items = 3 [(dev.f110.kubeproto.field) = { go_name: "Items", api_field_name: "items", inline: false }];
}

message ListMeta {
  // Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
  optional string self_link = 1 [(dev.f110.kubeproto.field) = { go_name: "SelfLink", api_field_name: "selfLink", inline: false }];
  // String that identifies the server's internal version of this object that
  // can be used by clients to determine when objects have changed.
  // Value must be treated as opaque by clients and passed unmodified back to the server.
  // Populated by the system.
  // Read-only.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
  optional string resource_version = 2 [(dev.f110.kubeproto.field) = { go_name: "ResourceVersion", api_field_name: "resourceVersion", inline: false }];
  // continue may be set if the user set a limit on the number of items returned, and indicates that
  // the server has more data available. The value is opaque and may be used to issue another request
  // to the endpoint that served this list to retrieve the next set of available objects. Continuing a
  // consistent list may not be possible if the server configuration has changed or more than a few
  // minutes have passed. The resourceVersion field returned when using this continue value will be
  // identical to the value in the first response, unless you have received this token from an error
  // message.
  optional string continue = 3 [(dev.f110.kubeproto.field) = { go_name: "Continue", api_field_name: "continue", inline: false }];
  // remainingItemCount is the number of subsequent items in the list which are not included in this
  // list response. If the list request contained label or field selectors, then the number of
  // remaining items is unknown and the field will be left unset and omitted during serialization.
  // If the list is complete (either because it is not chunking or because this is the last chunk),
  // then there are no more remaining items and this field will be left unset and omitted during
  // serialization.
  // Servers older than v1.15 do not set this field.
  // The intended use of the remainingItemCount is *estimating* the size of a collection. Clients
  // should not rely on the remainingItemCount to be set or to be exact.
  optional int64 remaining_item_count = 4 [(dev.f110.kubeproto.field) = { go_name: "RemainingItemCount", api_field_name: "remainingItemCount", inline: false }];
}

message ListOptions {
  TypeMeta type_meta = 1 [(dev.f110.kubeproto.field) = { go_name: "TypeMeta", inline: true }];
  // A selector to restrict the list of returned objects by their labels.
  // Defaults to everything.
  optional string label_selector = 2 [(dev.f110.kubeproto.field) = { go_name: "LabelSelector", api_field_name: "labelSelector", inline: false }];
  // A selector to restrict the list of returned objects by their fields.
  // Defaults to everything.
  optional string field_selector = 3 [(dev.f110.kubeproto.field) = { go_name: "FieldSelector", api_field_name: "fieldSelector", inline: false }];
  // Watch for changes to the described resources and return them as a stream of
  // add, update, and remove notifications. Specify resourceVersion.
  optional bool watch = 4 [(dev.f110.kubeproto.field) = { go_name: "Watch", api_field_name: "watch", inline: false }];
  // allowWatchBookmarks requests watch events with type "BOOKMARK".
  // Servers that do not implement bookmarks may ignore this flag and
  // bookmarks are sent at the server's discretion. Clients should not
  // assume bookmarks are returned at any specific interval, nor may they
  // assume the server will send any BOOKMARK event during a session.
  // If this is not a watch, this field is ignored.
  optional bool allow_watch_bookmarks = 5 [(dev.f110.kubeproto.field) = { go_name: "AllowWatchBookmarks", api_field_name: "allowWatchBookmarks", inline: false }];
  // resourceVersion sets a constraint on what resource versions a request may be served from.
  // See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for
  // details.
  // Defaults to unset
  optional string resource_version = 6 [(dev.f110.kubeproto.field) = { go_name: "ResourceVersion", api_field_name: "resourceVersion", inline: false }];
  // resourceVersionMatch determines how resourceVersion is applied to list calls.
  // It is highly recommended that resourceVersionMatch be set for list calls where
  // resourceVersion is set
  // See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for
  // details.
  // Defaults to unset
  optional ResourceVersionMatch resource_version_match = 7 [(dev.f110.kubeproto.field) = { go_name: "ResourceVersionMatch", api_field_name: "resourceVersionMatch", inline: false }];
  // Timeout for the list/watch call.
  // This limits the duration of the call, regardless of any activity or inactivity.
  optional int64 timeout_seconds = 8 [(dev.f110.kubeproto.field) = { go_name: "TimeoutSeconds", api_field_name: "timeoutSeconds", inline: false }];
  // limit is a maximum number of responses to return for a list call. If more items exist, the
  // server will set the `continue` field on the list metadata to a value that can be used with the
  // same initial query to retrieve the next set of results. Setting a limit may return fewer than
  // the requested amount of items (up to zero items) in the event all requested objects are
  // filtered out and clients should only use the presence of the continue field to determine whether
  // more results are available. Servers may choose not to support the limit argument and will return
  // all of the available results. If limit is specified and the continue field is empty, clients may
  // assume that no more results are available. This field is not supported if watch is true.
  // The server guarantees that the objects returned when using continue will be identical to issuing
  // a single list call without a limit - that is, no objects created, modified, or deleted after the
  // first request is issued will be included in any subsequent continued requests. This is sometimes
  // referred to as a consistent snapshot, and ensures that a client that is using limit to receive
  // smaller chunks of a very large result can ensure they see all possible objects. If objects are
  // updated during a chunked list the version of the object that was present at the time the first list
  // result was calculated is returned.
  optional int64 limit = 9 [(dev.f110.kubeproto.field) = { go_name: "Limit", api_field_name: "limit", inline: false }];
  // The continue option should be set when retrieving more results from the server. Since this value is
  // server defined, clients may only use the continue value from a previous query result with identical
  // query parameters (except for the value of continue) and the server may reject a continue value it
  // does not recognize. If the specified continue value is no longer valid whether due to expiration
  // (generally five to fifteen minutes) or a configuration change on the server, the server will
  // respond with a 410 ResourceExpired error together with a continue token. If the client needs a
  // consistent list, it must restart their list without the continue field. Otherwise, the client may
  // send another list request with the token received with the 410 error, the server will respond with
  // a list starting from the next key, but from the latest snapshot, which is inconsistent from the
  // previous list results - objects that are created, modified, or deleted after the first list request
  // will be included in the response, as long as their keys are after the "next key".
  // This field is not supported when watch is true. Clients may start a watch from the last
  // resourceVersion value returned by the server and not miss any modifications.
  optional string continue = 10 [(dev.f110.kubeproto.field) = { go_name: "Continue", api_field_name: "continue", inline: false }];
}

message ManagedFieldsEntry {
  // Manager is an identifier of the workflow managing these fields.
  optional string manager = 1 [(dev.f110.kubeproto.field) = { go_name: "Manager", api_field_name: "manager", inline: false }];
  // Operation is the type of operation which lead to this ManagedFieldsEntry being created.
  // The only valid values for this field are 'Apply' and 'Update'.
  optional ManagedFieldsOperationType operation = 2 [(dev.f110.kubeproto.field) = { go_name: "Operation", api_field_name: "operation", inline: false }];
  // APIVersion defines the version of this resource that this field set
  // applies to. The format is "group/version" just like the top-level
  // APIVersion field. It is necessary to track the version of a field
  // set because it cannot be automatically converted.
  optional string api_version = 3 [(dev.f110.kubeproto.field) = { go_name: "APIVersion", api_field_name: "apiVersion", inline: false }];
  // Time is the timestamp of when the ManagedFields entry was added. The
  // timestamp will also be updated if a field is added, the manager
  // changes any of the owned fields value or removes a field. The
  // timestamp does not update when a field is removed from the entry
  // because another manager took it over.
  optional Time time = 4 [(dev.f110.kubeproto.field) = { go_name: "Time", api_field_name: "time", inline: false }];
  // FieldsType is the discriminator for the different fields format and version.
  // There is currently only one possible value: "FieldsV1"
  optional string fields_type = 5 [(dev.f110.kubeproto.field) = { go_name: "FieldsType", api_field_name: "fieldsType", inline: false }];
  // FieldsV1 holds the first JSON version format as described in the "FieldsV1" type.
  optional FieldsV1 fields_v1 = 6 [(dev.f110.kubeproto.field) = { go_name: "FieldsV1", api_field_name: "fieldsV1", inline: false }];
  // Subresource is the name of the subresource used to update that object, or
  // empty string if the object was updated through the main resource. The
  // value of this field is used to distinguish between managers, even if they
  // share the same name. For example, a status update will be distinct from a
  // regular update using the same manager name.
  // Note that the APIVersion field is not related to the Subresource field and
  // it always corresponds to the version of the main resource.
  optional string subresource = 7 [(dev.f110.kubeproto.field) = { go_name: "Subresource", api_field_name: "subresource", inline: false }];
}

message MicroTime {
  // Represents seconds of UTC time since Unix epoch
  // 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
  // 9999-12-31T23:59:59Z inclusive.
  int64 seconds = 1 [(dev.f110.kubeproto.field) = { go_name: "Seconds", api_field_name: "seconds", inline: false }];
  // Non-negative fractions of a second at nanosecond resolution. Negative
  // second values with fractions must still have non-negative nanos values
  // that count forward in time. Must be from 0 to 999,999,999
  // inclusive. This field may be limited in precision depending on context.
  int32 nanos = 2 [(dev.f110.kubeproto.field) = { go_name: "Nanos", api_field_name: "nanos", inline: false }];
}

message ObjectMeta {
  // Name must be unique within a namespace. Is required when creating resources, although
  // some resources may allow a client to request the generation of an appropriate name
  // automatically. Name is primarily intended for creation idempotence and configuration
  // definition.
  // Cannot be updated.
  // More info: http://kubernetes.io/docs/user-guide/identifiers#names
  optional string name = 1 [(dev.f110.kubeproto.field) = { go_name: "Name", api_field_name: "name", inline: false }];
  // GenerateName is an optional prefix, used by the server, to generate a unique
  // name ONLY IF the Name field has not been provided.
  // If this field is used, the name returned to the client will be different
  // than the name passed. This value will also be combined with a unique suffix.
  // The provided value has the same validation rules as the Name field,
  // and may be truncated by the length of the suffix required to make the value
  // unique on the server.
  // If this field is specified and the generated name exists, the server will return a 409.
  // Applied only if Name is not specified.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
  optional string generate_name = 2 [(dev.f110.kubeproto.field) = { go_name: "GenerateName", api_field_name: "generateName", inline: false }];
  // Namespace defines the space within which each name must be unique. An empty namespace is
  // equivalent to the "default" namespace, but "default" is the canonical representation.
  // Not all objects are required to be scoped to a namespace - the value of this field for
  // those objects will be empty.
  // Must be a DNS_LABEL.
  // Cannot be updated.
  // More info: http://kubernetes.io/docs/user-guide/namespaces
  optional string namespace = 3 [(dev.f110.kubeproto.field) = { go_name: "Namespace", api_field_name: "namespace", inline: false }];
  // Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
  optional string self_link = 4 [(dev.f110.kubeproto.field) = { go_name: "SelfLink", api_field_name: "selfLink", inline: false }];
  // UID is the unique in time and space value for this object. It is typically generated by
  // the server on successful creation of a resource and is not allowed to change on PUT
  // operations.
  // Populated by the system.
  // Read-only.
  // More info: http://kubernetes.io/docs/user-guide/identifiers#uids
  optional string uid = 5 [(dev.f110.kubeproto.field) = { go_name: "UID", api_field_name: "uid", inline: false }];
  // An opaque value that represents the internal version of this object that can
  // be used by clients to determine when objects have changed. May be used for optimistic
  // concurrency, change detection, and the watch operation on a resource or set of resources.
  // Clients must treat these values as opaque and passed unmodified back to the server.
  // They may only be valid for a particular resource or set of resources.
  // Populated by the system.
  // Read-only.
  // Value must be treated as opaque by clients and .
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
  optional string resource_version = 6 [(dev.f110.kubeproto.field) = { go_name: "ResourceVersion", api_field_name: "resourceVersion", inline: false }];
  // A sequence number representing a specific generation of the desired state.
  // Populated by the system. Read-only.
  optional int64 generation = 7 [(dev.f110.kubeproto.field) = { go_name: "Generation", api_field_name: "generation", inline: false }];
  // CreationTimestamp is a timestamp representing the server time when this object was
  // created. It is not guaranteed to be set in happens-before order across separate operations.
  // Clients may not set this value. It is represented in RFC3339 form and is in UTC.
  // Populated by the system.
  // Read-only.
  // Null for lists.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  optional Time creation_timestamp = 8 [(dev.f110.kubeproto.field) = { go_name: "CreationTimestamp", api_field_name: "creationTimestamp", inline: false }];
  // DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This
  // field is set by the server when a graceful deletion is requested by the user, and is not
  // directly settable by a client. The resource is expected to be deleted (no longer visible
  // from resource lists, and not reachable by name) after the time in this field, once the
  // finalizers list is empty. As long as the finalizers list contains items, deletion is blocked.
  // Once the deletionTimestamp is set, this value may not be unset or be set further into the
  // future, although it may be shortened or the resource may be deleted prior to this time.
  // For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react
  // by sending a graceful termination signal to the containers in the pod. After that 30 seconds,
  // the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup,
  // remove the pod from the API. In the presence of network partitions, this object may still
  // exist after this timestamp, until an administrator or automated process can determine the
  // resource is fully terminated.
  // If not set, graceful deletion of the object has not been requested.
  // Populated by the system when a graceful deletion is requested.
  // Read-only.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  optional Time deletion_timestamp = 9 [(dev.f110.kubeproto.field) = { go_name: "DeletionTimestamp", api_field_name: "deletionTimestamp", inline: false }];
  // Number of seconds allowed for this object to gracefully terminate before
  // it will be removed from the system. Only set when deletionTimestamp is also set.
  // May only be shortened.
  // Read-only.
  optional int64 deletion_grace_period_seconds = 10 [(dev.f110.kubeproto.field) = { go_name: "DeletionGracePeriodSeconds", api_field_name: "deletionGracePeriodSeconds", inline: false }];
  // Map of string keys and values that can be used to organize and categorize
  // (scope and select) objects. May match selectors of replication controllers
  // and services.
  // More info: http://kubernetes.io/docs/user-guide/labels
  map<string, string> labels = 11 [(dev.f110.kubeproto.field) = { go_name: "Labels", api_field_name: "labels", inline: false }];
  // Annotations is an unstructured key value map stored with a resource that may be
  // set by external tools to store and retrieve arbitrary metadata. They are not
  // queryable and should be preserved when modifying objects.
  // More info: http://kubernetes.io/docs/user-guide/annotations
  map<string, string> annotations = 12 [(dev.f110.kubeproto.field) = { go_name: "Annotations", api_field_name: "annotations", inline: false }];
  // List of objects depended by this object. If ALL objects in the list have
  // been deleted, this object will be garbage collected. If this object is managed by a controller,
  // then an entry in this list will point to this controller, with the controller field set to true.
  // There cannot be more than one managing controller.
  repeated OwnerReference owner_references = 13 [(dev.f110.kubeproto.field) = { go_name: "OwnerReferences", api_field_name: "ownerReferences", inline: false }];
  // Must be empty before the object is deleted from the registry. Each entry
  // is an identifier for the responsible component that will remove the entry
  // from the list. If the deletionTimestamp of the object is non-nil, entries
  // in this list can only be removed.
  // Finalizers may be processed and removed in any order.  Order is NOT enforced
  // because it introduces significant risk of stuck finalizers.
  // finalizers is a shared field, any actor with permission can reorder it.
  // If the finalizer list is processed in order, then this can lead to a situation
  // in which the component responsible for the first finalizer in the list is
  // waiting for a signal (field value, external system, or other) produced by a
  // component responsible for a finalizer later in the list, resulting in a deadlock.
  // Without enforced ordering finalizers are free to order amongst themselves and
  // are not vulnerable to ordering changes in the list.
  repeated string finalizers = 14 [(dev.f110.kubeproto.field) = { go_name: "Finalizers", api_field_name: "finalizers", inline: false }];
  // Deprecated: ClusterName is a legacy field that was always cleared by
  // the system and never used; it will be removed completely in 1.25.
  // The name in the go struct is changed to help clients detect
  // accidental use.
  optional string z_z_z_deprecated_cluster_name = 15 [(dev.f110.kubeproto.field) = { go_name: "ZZZ_DeprecatedClusterName", api_field_name: "clusterName", inline: false }];
  // ManagedFields maps workflow-id and version to the set of fields
  // that are managed by that workflow. This is mostly for internal
  // housekeeping, and users typically shouldn't need to set or
  // understand this field. A workflow can be the user's name, a
  // controller's name, or the name of a specific apply path like
  // "ci-cd". The set of fields is always in the version that the
  // workflow used when modifying the object.
  repeated ManagedFieldsEntry managed_fields = 16 [(dev.f110.kubeproto.field) = { go_name: "ManagedFields", api_field_name: "managedFields", inline: false }];
}

message OwnerReference {
  // API version of the referent.
  string api_version = 1 [(dev.f110.kubeproto.field) = { go_name: "APIVersion", api_field_name: "apiVersion", inline: false }];
  // Kind of the referent.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  string kind = 2 [(dev.f110.kubeproto.field) = { go_name: "Kind", api_field_name: "kind", inline: false }];
  // Name of the referent.
  // More info: http://kubernetes.io/docs/user-guide/identifiers#names
  string name = 3 [(dev.f110.kubeproto.field) = { go_name: "Name", api_field_name: "name", inline: false }];
  // UID of the referent.
  // More info: http://kubernetes.io/docs/user-guide/identifiers#uids
  string uid = 4 [(dev.f110.kubeproto.field) = { go_name: "UID", api_field_name: "uid", inline: false }];
  // If true, this reference points to the managing controller.
  optional bool controller = 5 [(dev.f110.kubeproto.field) = { go_name: "Controller", api_field_name: "controller", inline: false }];
  // If true, AND if the owner has the "foregroundDeletion" finalizer, then
  // the owner cannot be deleted from the key-value store until this
  // reference is removed.
  // See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion
  // for how the garbage collector interacts with this field and enforces the foreground deletion.
  // Defaults to false.
  // To set this field, a user needs "delete" permission of the owner,
  // otherwise 422 (Unprocessable Entity) will be returned.
  optional bool block_owner_deletion = 6 [(dev.f110.kubeproto.field) = { go_name: "BlockOwnerDeletion", api_field_name: "blockOwnerDeletion", inline: false }];
}

message PartialObjectMetadata {
  option (dev.f110.kubeproto.kind) = {
  };
}

message PartialObjectMetadataList {
  TypeMeta type_meta = 1 [(dev.f110.kubeproto.field) = { go_name: "TypeMeta", inline: true }];
  // Standard list metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  optional ListMeta list_meta = 2 [(dev.f110.kubeproto.field) = { go_name: "ListMeta", api_field_name: "metadata", inline: false }];
  // items contains each of the included items.
  repeated PartialObjectMetadata items = 3 [(dev.f110.kubeproto.field) = { go_name: "Items", api_field_name: "items", inline: false }];
}

message Patch {
}

message PatchOptions {
  TypeMeta type_meta = 1 [(dev.f110.kubeproto.field) = { go_name: "TypeMeta", inline: true }];
  // When present, indicates that modifications should not be
  // persisted. An invalid or unrecognized dryRun directive will
  // result in an error response and no further processing of the
  // request. Valid values are:
  // - All: all dry run stages will be processed
  repeated string dry_run = 2 [(dev.f110.kubeproto.field) = { go_name: "DryRun", api_field_name: "dryRun", inline: false }];
  // Force is going to "force" Apply requests. It means user will
  // re-acquire conflicting fields owned by other people. Force
  // flag must be unset for non-apply patch requests.
  optional bool force = 3 [(dev.f110.kubeproto.field) = { go_name: "Force", api_field_name: "force", inline: false }];
  // fieldManager is a name associated with the actor or entity
  // that is making these changes. The value must be less than or
  // 128 characters long, and only contain printable characters,
  // as defined by https://golang.org/pkg/unicode/#IsPrint. This
  // field is required for apply requests
  // (application/apply-patch) but optional for non-apply patch
  // types (JsonPatch, MergePatch, StrategicMergePatch).
  optional string field_manager = 4 [(dev.f110.kubeproto.field) = { go_name: "FieldManager", api_field_name: "fieldManager", inline: false }];
  // fieldValidation instructs the server on how to handle
  // objects in the request (POST/PUT/PATCH) containing unknown
  // or duplicate fields, provided that the `ServerSideFieldValidation`
  // feature gate is also enabled. Valid values are:
  // - Ignore: This will ignore any unknown fields that are silently
  // dropped from the object, and will ignore all but the last duplicate
  // field that the decoder encounters. This is the default behavior
  // prior to v1.23 and is the default behavior when the
  // `ServerSideFieldValidation` feature gate is disabled.
  // - Warn: This will send a warning via the standard warning response
  // header for each unknown field that is dropped from the object, and
  // for each duplicate field that is encountered. The request will
  // still succeed if there are no other errors, and will only persist
  // the last of any duplicate fields. This is the default when the
  // `ServerSideFieldValidation` feature gate is enabled.
  // - Strict: This will fail the request with a BadRequest error if
  // any unknown fields would be dropped from the object, or if any
  // duplicate fields are present. The error returned from the server
  // will contain all unknown and duplicate fields encountered.
  optional string field_validation = 5 [(dev.f110.kubeproto.field) = { go_name: "FieldValidation", api_field_name: "fieldValidation", inline: false }];
}

message Preconditions {
  // Specifies the target UID.
  optional string uid = 1 [(dev.f110.kubeproto.field) = { go_name: "UID", api_field_name: "uid", inline: false }];
  // Specifies the target ResourceVersion
  optional string resource_version = 2 [(dev.f110.kubeproto.field) = { go_name: "ResourceVersion", api_field_name: "resourceVersion", inline: false }];
}

message RootPaths {
  // paths are the paths available at root.
  repeated string paths = 1 [(dev.f110.kubeproto.field) = { go_name: "Paths", api_field_name: "paths", inline: false }];
}

message ServerAddressByClientCIDR {
  // The CIDR with which clients can match their IP to figure out the server address that they should use.
  string client_cidr = 1 [(dev.f110.kubeproto.field) = { go_name: "ClientCIDR", api_field_name: "clientCIDR", inline: false }];
  // Address of this server, suitable for a client that matches the above CIDR.
  // This can be a hostname, hostname:port, IP or IP:port.
  string server_address = 2 [(dev.f110.kubeproto.field) = { go_name: "ServerAddress", api_field_name: "serverAddress", inline: false }];
}

message Status {
  TypeMeta type_meta = 1 [(dev.f110.kubeproto.field) = { go_name: "TypeMeta", inline: true }];
  // Standard list metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  optional ListMeta list_meta = 2 [(dev.f110.kubeproto.field) = { go_name: "ListMeta", api_field_name: "metadata", inline: false }];
  // Status of the operation.
  // One of: "Success" or "Failure".
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  optional string status = 3 [(dev.f110.kubeproto.field) = { go_name: "Status", api_field_name: "status", inline: false }];
  // A human-readable description of the status of this operation.
  optional string message = 4 [(dev.f110.kubeproto.field) = { go_name: "Message", api_field_name: "message", inline: false }];
  // A machine-readable description of why this operation is in the
  // "Failure" status. If this value is empty there
  // is no information available. A Reason clarifies an HTTP status
  // code but does not override it.
  optional StatusReason reason = 5 [(dev.f110.kubeproto.field) = { go_name: "Reason", api_field_name: "reason", inline: false }];
  // Extended data associated with the reason.  Each reason may define its
  // own extended details. This field is optional and the data returned
  // is not guaranteed to conform to any schema except that defined by
  // the reason type.
  optional StatusDetails details = 6 [(dev.f110.kubeproto.field) = { go_name: "Details", api_field_name: "details", inline: false }];
  // Suggested HTTP return code for this status, 0 if not set.
  optional int32 code = 7 [(dev.f110.kubeproto.field) = { go_name: "Code", api_field_name: "code", inline: false }];
}

message StatusCause {
  // A machine-readable description of the cause of the error. If this value is
  // empty there is no information available.
  optional CauseType type = 1 [(dev.f110.kubeproto.field) = { go_name: "Type", api_field_name: "reason", inline: false }];
  // A human-readable description of the cause of the error.  This field may be
  // presented as-is to a reader.
  optional string message = 2 [(dev.f110.kubeproto.field) = { go_name: "Message", api_field_name: "message", inline: false }];
  // The field of the resource that has caused this error, as named by its JSON
  // serialization. May include dot and postfix notation for nested attributes.
  // Arrays are zero-indexed.  Fields may appear more than once in an array of
  // causes due to fields having multiple errors.
  // Optional.
  // Examples:
  //   "name" - the field "name" on the current resource
  //   "items[0].name" - the field "name" on the first array entry in "items"
  optional string field = 3 [(dev.f110.kubeproto.field) = { go_name: "Field", api_field_name: "field", inline: false }];
}

message StatusDetails {
  // The name attribute of the resource associated with the status StatusReason
  // (when there is a single name which can be described).
  optional string name = 1 [(dev.f110.kubeproto.field) = { go_name: "Name", api_field_name: "name", inline: false }];
  // The group attribute of the resource associated with the status StatusReason.
  optional string group = 2 [(dev.f110.kubeproto.field) = { go_name: "Group", api_field_name: "group", inline: false }];
  // The kind attribute of the resource associated with the status StatusReason.
  // On some operations may differ from the requested resource Kind.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  optional string kind = 3 [(dev.f110.kubeproto.field) = { go_name: "Kind", api_field_name: "kind", inline: false }];
  // UID of the resource.
  // (when there is a single resource which can be described).
  // More info: http://kubernetes.io/docs/user-guide/identifiers#uids
  optional string uid = 4 [(dev.f110.kubeproto.field) = { go_name: "UID", api_field_name: "uid", inline: false }];
  // The Causes array includes more details associated with the StatusReason
  // failure. Not all StatusReasons may provide detailed causes.
  repeated StatusCause causes = 5 [(dev.f110.kubeproto.field) = { go_name: "Causes", api_field_name: "causes", inline: false }];
  // If specified, the time in seconds before the operation should be retried. Some errors may indicate
  // the client must take an alternate action - for those errors this field may indicate how long to wait
  // before taking the alternate action.
  optional int32 retry_after_seconds = 6 [(dev.f110.kubeproto.field) = { go_name: "RetryAfterSeconds", api_field_name: "retryAfterSeconds", inline: false }];
}

message TableOptions {
  TypeMeta type_meta = 1 [(dev.f110.kubeproto.field) = { go_name: "TypeMeta", inline: true }];
  // includeObject decides whether to include each object along with its columnar information.
  // Specifying "None" will return no object, specifying "Object" will return the full object contents, and
  // specifying "Metadata" (the default) will return the object's metadata in the PartialObjectMetadata kind
  // in version v1beta1 of the meta.k8s.io API group.
  optional IncludeObjectPolicy include_object = 2 [(dev.f110.kubeproto.field) = { go_name: "IncludeObject", api_field_name: "includeObject", inline: false }];
}

message Time {
  // Represents seconds of UTC time since Unix epoch
  // 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
  // 9999-12-31T23:59:59Z inclusive.
  int64 seconds = 1 [(dev.f110.kubeproto.field) = { go_name: "Seconds", api_field_name: "seconds", inline: false }];
  // Non-negative fractions of a second at nanosecond resolution. Negative
  // second values with fractions must still have non-negative nanos values
  // that count forward in time. Must be from 0 to 999,999,999
  // inclusive. This field may be limited in precision depending on context.
  int32 nanos = 2 [(dev.f110.kubeproto.field) = { go_name: "Nanos", api_field_name: "nanos", inline: false }];
}

message Timestamp {
  // Represents seconds of UTC time since Unix epoch
  // 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
  // 9999-12-31T23:59:59Z inclusive.
  int64 seconds = 1 [(dev.f110.kubeproto.field) = { go_name: "Seconds", api_field_name: "seconds", inline: false }];
  // Non-negative fractions of a second at nanosecond resolution. Negative
  // second values with fractions must still have non-negative nanos values
  // that count forward in time. Must be from 0 to 999,999,999
  // inclusive. This field may be limited in precision depending on context.
  int32 nanos = 2 [(dev.f110.kubeproto.field) = { go_name: "Nanos", api_field_name: "nanos", inline: false }];
}

message TypeMeta {
  // Kind is a string value representing the REST resource this object represents.
  // Servers may infer this from the endpoint the client submits requests to.
  // Cannot be updated.
  // In CamelCase.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  optional string kind = 1 [(dev.f110.kubeproto.field) = { go_name: "Kind", api_field_name: "kind", inline: false }];
  // APIVersion defines the versioned schema of this representation of an object.
  // Servers should convert recognized schemas to the latest internal value, and
  // may reject unrecognized values.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
  optional string api_version = 2 [(dev.f110.kubeproto.field) = { go_name: "APIVersion", api_field_name: "apiVersion", inline: false }];
}

message UpdateOptions {
  TypeMeta type_meta = 1 [(dev.f110.kubeproto.field) = { go_name: "TypeMeta", inline: true }];
  // When present, indicates that modifications should not be
  // persisted. An invalid or unrecognized dryRun directive will
  // result in an error response and no further processing of the
  // request. Valid values are:
  // - All: all dry run stages will be processed
  repeated string dry_run = 2 [(dev.f110.kubeproto.field) = { go_name: "DryRun", api_field_name: "dryRun", inline: false }];
  // fieldManager is a name associated with the actor or entity
  // that is making these changes. The value must be less than or
  // 128 characters long, and only contain printable characters,
  // as defined by https://golang.org/pkg/unicode/#IsPrint.
  optional string field_manager = 3 [(dev.f110.kubeproto.field) = { go_name: "FieldManager", api_field_name: "fieldManager", inline: false }];
  // fieldValidation instructs the server on how to handle
  // objects in the request (POST/PUT/PATCH) containing unknown
  // or duplicate fields, provided that the `ServerSideFieldValidation`
  // feature gate is also enabled. Valid values are:
  // - Ignore: This will ignore any unknown fields that are silently
  // dropped from the object, and will ignore all but the last duplicate
  // field that the decoder encounters. This is the default behavior
  // prior to v1.23 and is the default behavior when the
  // `ServerSideFieldValidation` feature gate is disabled.
  // - Warn: This will send a warning via the standard warning response
  // header for each unknown field that is dropped from the object, and
  // for each duplicate field that is encountered. The request will
  // still succeed if there are no other errors, and will only persist
  // the last of any duplicate fields. This is the default when the
  // `ServerSideFieldValidation` feature gate is enabled.
  // - Strict: This will fail the request with a BadRequest error if
  // any unknown fields would be dropped from the object, or if any
  // duplicate fields are present. The error returned from the server
  // will contain all unknown and duplicate fields encountered.
  optional string field_validation = 4 [(dev.f110.kubeproto.field) = { go_name: "FieldValidation", api_field_name: "fieldValidation", inline: false }];
}

message Verbs {
  repeated string items = 1 [(dev.f110.kubeproto.field) = { go_name: "", inline: false }];
}

message WatchEvent {
  string type = 1 [(dev.f110.kubeproto.field) = { go_name: "Type", api_field_name: "type", inline: false }];
  // Object is:
  //  * If Type is Added or Modified: the new state of the object.
  //  * If Type is Deleted: the state of the object immediately before deletion.
  //  * If Type is Error: *Status is recommended; other types may make sense
  //    depending on context.
  .k8s.io.apimachinery.pkg.runtime.RawExtension object = 2 [(dev.f110.kubeproto.field) = { go_name: "Object", api_field_name: "object", inline: false }];
}
